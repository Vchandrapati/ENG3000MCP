Index: src/main/java/org/example/messages/ClientFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.messages;\r\n\r\nimport org.example.*;\r\nimport org.example.client.*;\r\nimport org.example.state.SystemState;\r\nimport org.example.state.SystemStateManager;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.net.InetAddress;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\npublic class ClientFactory {\r\n    private Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\r\n    private HashMap<String, Integer> locations = new HashMap<>();\r\n    private Database db = Database.getInstance();\r\n\r\n    private static class Holder {\r\n        private static final ClientFactory INSTANCE = new ClientFactory();\r\n    }\r\n\r\n    public static ClientFactory getInstance() {\r\n        return Holder.INSTANCE;\r\n    }\r\n\r\n    public void handleInitialise(ReceiveMessage receiveMessage, InetAddress address, int port) {\r\n        try {\r\n            MessageGenerator messageGenerator = new MessageGenerator();\r\n            MessageSender messageSender =\r\n                    new MessageSender(Server.getInstance(), address, port, receiveMessage.clientID);\r\n            AbstractClient<?, ?> client = null;\r\n            switch (receiveMessage.clientType) {\r\n                case \"CCP\":\r\n                    client = new BladeRunnerClient(receiveMessage.clientID, messageGenerator,\r\n                            messageSender);\r\n                    break;\r\n                case \"CPC\": {\r\n                    Integer zone = locations.get(address.toString() + port);\r\n                    System.out.println(address.toString());\r\n                    client = new CheckpointClient(receiveMessage.clientID, messageGenerator,\r\n                            messageSender, zone);\r\n                    break;\r\n                }\r\n                case \"STC\": {\r\n                    Integer zone = locations.get(address.toString() + port);\r\n                    client = new StationClient(receiveMessage.clientID, messageGenerator,\r\n                            messageSender, zone);\r\n                    break;\r\n                }\r\n                default:\r\n                    logger.log(Level.WARNING, \"Unknown client type: {0}\",\r\n                            receiveMessage.clientType);\r\n                    break;\r\n            }\r\n\r\n            if (client != null) {\r\n                db.addClient(receiveMessage.clientID, client);\r\n                client.sendAcknowledgeMessage(MessageEnums.AKType.AKIN);\r\n                logger.log(Level.INFO, \"Initialised new client: {0}\", receiveMessage.clientID);\r\n                // if a client joins while not in waiting state, goes to emergency mode\r\n                SystemStateManager.getInstance().addUnresponsiveClient(receiveMessage.clientID,\r\n                        ReasonEnum.INVALCONNECT);\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            logger.log(Level.SEVERE, \"Failed to handle message\");\r\n            logger.log(Level.SEVERE, \"Exception: \", e);\r\n        }\r\n    }\r\n\r\n    public void readFromFile(String fileLocation) {\r\n        try {\r\n            File file = new File(fileLocation);\r\n            Scanner s = new Scanner(file);\r\n\r\n            while (s.hasNextLine()) {\r\n                String str = s.nextLine();\r\n                String[] splitStr = str.split(\"_\");\r\n                if (splitStr.length == 2) {\r\n                    locations.put(splitStr[0], Integer.parseInt(splitStr[1]));\r\n                    System.out.println(splitStr[0] + \"there\");\r\n                }\r\n            }\r\n\r\n            s.close();\r\n        } catch (FileNotFoundException e) {\r\n            logger.log(Level.SEVERE, \"File: {0} not found\", fileLocation);\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/messages/ClientFactory.java b/src/main/java/org/example/messages/ClientFactory.java
--- a/src/main/java/org/example/messages/ClientFactory.java	(revision 90811cac742013b2094b5fb5eaba2a431d01cf97)
+++ b/src/main/java/org/example/messages/ClientFactory.java	(date 1729079633383)
@@ -14,9 +14,9 @@
 import java.util.logging.Logger;
 
 public class ClientFactory {
-    private Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
-    private HashMap<String, Integer> locations = new HashMap<>();
-    private Database db = Database.getInstance();
+    private final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
+    private final HashMap<String, Integer> locations = new HashMap<>();
+    private final Database db = Database.getInstance();
 
     private static class Holder {
         private static final ClientFactory INSTANCE = new ClientFactory();
@@ -30,7 +30,7 @@
         try {
             MessageGenerator messageGenerator = new MessageGenerator();
             MessageSender messageSender =
-                    new MessageSender(Server.getInstance(), address, port, receiveMessage.clientID);
+                    new MessageSender(address, port, receiveMessage.clientID);
             AbstractClient<?, ?> client = null;
             switch (receiveMessage.clientType) {
                 case "CCP":
@@ -39,7 +39,6 @@
                     break;
                 case "CPC": {
                     Integer zone = locations.get(address.toString() + port);
-                    System.out.println(address.toString());
                     client = new CheckpointClient(receiveMessage.clientID, messageGenerator,
                             messageSender, zone);
                     break;
Index: src/main/java/org/example/state/SystemStateManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.state;\r\n\r\nimport org.example.Database;\r\nimport org.example.client.ReasonEnum;\r\nimport java.security.cert.CertPathValidatorException.Reason;\r\nimport java.util.EnumMap;\r\nimport java.util.Map;\r\nimport java.util.function.Supplier;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\n// Manages the states of the system\r\npublic class SystemStateManager {\r\n    private static final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\r\n\r\n    // private static final Database db = Database.getInstance();\r\n    private static Database db = Database.getInstance();\r\n    private static final Map<SystemState, Supplier<SystemStateInterface>> stateMap;\r\n\r\n    // singleton instance of class\r\n    private static SystemStateManager instance;\r\n\r\n    static {\r\n        stateMap = new EnumMap<>(SystemState.class);\r\n        stateMap.put(SystemState.WAITING, WaitingState::new);\r\n        stateMap.put(SystemState.MAPPING, MappingState::new);\r\n        stateMap.put(SystemState.RUNNING, RunningState::new);\r\n        stateMap.put(SystemState.EMERGENCY, EmergencyState::new);\r\n    }\r\n\r\n    // Holds the current state and the current state concrete implementation\r\n    // private SystemState currentState;\r\n    // private SystemStateInterface currentStateConcrete;\r\n    // private boolean error = false;\r\n    // private long timeWaited = System.currentTimeMillis();\r\n\r\n    // temp for testing\r\n    public SystemState currentState;\r\n    public SystemStateInterface currentStateConcrete;\r\n    public boolean error = false;\r\n    public long timeWaited = System.currentTimeMillis();\r\n\r\n    public void injectDatabase(Database db) {\r\n        this.db = db;\r\n    }\r\n\r\n    // Initial state\r\n    private SystemStateManager() {\r\n        setState(SystemState.WAITING);\r\n    }\r\n\r\n    // gets instance of system state manager, if none makes one\r\n    public static synchronized SystemStateManager getInstance() {\r\n        if (instance == null) {\r\n            instance = new SystemStateManager();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    // If it is time for the current state to run its perform its operation,\r\n    // otherwise checkChange\r\n    public void run() {\r\n        long timeToWait = currentStateConcrete.getTimeToWait();\r\n\r\n        if (System.currentTimeMillis() - timeWaited >= timeToWait) {\r\n            // if the current state returns true, means it has finished and will be changed\r\n            // to its next appropriate state\r\n            if (currentStateConcrete.performOperation()) {\r\n                setState(currentStateConcrete.getNextState());\r\n            }\r\n\r\n            timeWaited = System.currentTimeMillis();\r\n        } else {\r\n            checkChange();\r\n        }\r\n    }\r\n\r\n    // Checks to see if the system needs to go to emergency state, if already don't\r\n    private boolean checkChange() {\r\n        if (error && currentState != SystemState.EMERGENCY) {\r\n            error = false;\r\n            logger.log(Level.WARNING, \"Error detected while in state {0}\", currentState);\r\n            setState(SystemState.EMERGENCY);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // gets current state\r\n    public SystemState getState() {\r\n        return currentState;\r\n    }\r\n\r\n    // Sets the state of the program to the given one\r\n    public boolean setState(SystemState newState) {\r\n        if (newState == null || currentState == newState) {\r\n            return false;\r\n        }\r\n\r\n        currentState = newState;\r\n        currentStateConcrete = stateMap.get(newState).get();\r\n\r\n        logger.log(Level.INFO, \"Changing to system state {0}\", newState);\r\n        return true;\r\n    }\r\n\r\n\r\n    // Takes trips/untrips from processor only in WAITING and MAPPING state\r\n    public boolean needsTrip(int trippedSensor, boolean untrip) {\r\n        // if in waiting phase, no mans land, anything could happen MCP does nothing but waits for\r\n        // connections\r\n        // will take any trips from Processor and void them\r\n        if (currentState == SystemState.WAITING) {\r\n            return true;\r\n        }\r\n\r\n        // if in the appropriate state of MAPPING only\r\n        if (currentState == SystemState.MAPPING) {\r\n            MappingState.addTrip(trippedSensor, untrip);\r\n            logger.log(Level.INFO, \"System state manager has detected untrip {0}\", trippedSensor);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Takes a string id of a client id\r\n    // adds a client to the unresponsive client list in the database\r\n    // only does this if in not in the waiting state\r\n    public boolean addUnresponsiveClient(String id, ReasonEnum reason) {\r\n        if (currentState != SystemState.WAITING && id != null && reason != null\r\n                && db.addUnresponsiveClient(id, reason)) {\r\n            logger.log(Level.WARNING, \"Client {0} has {1}\", new Object[] {id, reason});\r\n            error = true;\r\n            return true;\r\n\r\n        }\r\n        return false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/state/SystemStateManager.java b/src/main/java/org/example/state/SystemStateManager.java
--- a/src/main/java/org/example/state/SystemStateManager.java	(revision 90811cac742013b2094b5fb5eaba2a431d01cf97)
+++ b/src/main/java/org/example/state/SystemStateManager.java	(date 1729076669977)
@@ -83,6 +83,7 @@
             setState(SystemState.EMERGENCY);
             return true;
         }
+
         return false;
     }
 
Index: src/main/java/org/example/messages/MessageHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.messages;\r\n\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.example.*;\r\nimport org.example.client.BladeRunnerClient;\r\nimport org.example.client.CheckpointClient;\r\nimport org.example.client.ReasonEnum;\r\nimport org.example.client.StationClient;\r\nimport org.example.state.SystemStateManager;\r\n\r\nimport java.net.InetAddress;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\npublic class MessageHandler {\r\n    private Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\r\n    private ObjectMapper objectMapper = new ObjectMapper();\r\n    private Database db = Database.getInstance();\r\n    private SystemStateManager systemStateManager = SystemStateManager.getInstance();\r\n    private StatHandler statHandler = new StatHandler();\r\n    private ClientFactory clientFactory = ClientFactory.getInstance();\r\n\r\n    public void handleMessage(String message, InetAddress address, int port) {\r\n        try {\r\n            ReceiveMessage receiveMessage = objectMapper.readValue(message, ReceiveMessage.class);\r\n\r\n            // Handle based on the client type\r\n            switch (receiveMessage.clientType) {\r\n                case \"CCP\":\r\n                    handleCCPMessage(receiveMessage, address, port);\r\n                    break;\r\n                case \"STC\":\r\n                    handleSTCMessage(receiveMessage, address, port);\r\n                    break;\r\n                case \"CPC\":\r\n                    handleCPCMessage(receiveMessage, address, port);\r\n                    break;\r\n                default:\r\n                    logger.log(Level.WARNING, \"Unknown client type: {0}\",\r\n                            receiveMessage.clientType);\r\n            }\r\n        } catch (JsonProcessingException e) {\r\n            logger.log(Level.SEVERE, \"Failed to parse message: {0} \\nException: {1}\",\r\n                    new Object[] {message, e.getMessage()});\r\n        } catch (Exception e) {\r\n            logger.log(Level.SEVERE,\r\n                    \"Unexpected error handling message from {0}:{1} \\nException: {2}\",\r\n                    new Object[] {address, port, e});\r\n\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Handles all checkpoint messages\r\n    private void handleCPCMessage(ReceiveMessage receiveMessage, InetAddress address, int port) {\r\n        db.getClient(receiveMessage.clientID, CheckpointClient.class).ifPresentOrElse(client -> {\r\n            client.setLastResponse(receiveMessage.message);\r\n            // Client is present\r\n            switch (receiveMessage.message) {\r\n                case \"TRIP\":\r\n                    switch (MessageEnums.CPCStatus.valueOf(receiveMessage.status)) {\r\n                        case MessageEnums.CPCStatus.ON:\r\n                            client.updateStatus(MessageEnums.CPCStatus.ON);\r\n                            Processor.checkpointTripped(client.getLocation(), false);\r\n                            break;\r\n                        case MessageEnums.CPCStatus.OFF:\r\n                            client.updateStatus(MessageEnums.CPCStatus.OFF);\r\n                            Processor.checkpointTripped(client.getLocation(), true);\r\n                            break;\r\n                        case MessageEnums.CPCStatus.ERR:\r\n                            systemStateManager.addUnresponsiveClient(client.getId(),\r\n                                    ReasonEnum.CLIENTERR);\r\n                            break;\r\n                        default:\r\n                            break;\r\n\r\n                    }\r\n\r\n                    client.sendAcknowledgeMessage(MessageEnums.AKType.AKTR);\r\n                    logger.log(Level.INFO, \"Received TRIP command from Checkpoint: {0}\",\r\n                            receiveMessage.clientID);\r\n                    break;\r\n                case \"STAT\":\r\n                    statHandler.handleStatMessage(client, receiveMessage);\r\n                    break;\r\n                case \"AKEX\":\r\n                    break;\r\n                default:\r\n                    logger.log(Level.SEVERE, \"Failed to handle checkpoint message: {0}\",\r\n                            receiveMessage);\r\n                    break;\r\n            }\r\n        }, () -> {\r\n            // Client is not present\r\n            if (\"CPIN\".equals(receiveMessage.message)) {\r\n                handleInitialise(receiveMessage, address, port);\r\n\r\n                logger.log(Level.INFO, \"Received CPIN message from Checkpoint: {0}\",\r\n                        receiveMessage.clientID);\r\n            } else {\r\n                logger.log(Level.SEVERE, \"Attempted to get non-existent checkpoint: {0}\",\r\n                        receiveMessage.clientID);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private void handleCCPMessage(ReceiveMessage receiveMessage, InetAddress address, int port) {\r\n        db.getClient(receiveMessage.clientID, BladeRunnerClient.class).ifPresentOrElse(client -> {\r\n            client.setLastResponse(receiveMessage.message);\r\n            // Client is present\r\n            switch (receiveMessage.message) {\r\n                case \"STAT\":\r\n                    statHandler.handleStatMessage(client, receiveMessage);\r\n\r\n                    break;\r\n                case \"AKEX\":\r\n                    break;\r\n                default:\r\n                    logger.log(Level.WARNING, \"Unknown CCP message: {0}\", receiveMessage.message);\r\n                    break;\r\n            }\r\n        }, () -> {\r\n            // Client is not present\r\n            if (\"CCIN\".equals(receiveMessage.message)) {\r\n                handleInitialise(receiveMessage, address, port);\r\n                logger.log(Level.INFO, \"Received CCIN message from Blade Runner: {0}\",\r\n                        receiveMessage.clientID);\r\n            } else {\r\n                logger.log(Level.SEVERE, \"Attempted to get non-existent bladerunner: {0}\",\r\n                        receiveMessage.clientID);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void handleSTCMessage(ReceiveMessage receiveMessage, InetAddress address, int port) {\r\n        db.getClient(receiveMessage.clientID, StationClient.class).ifPresentOrElse(client -> {\r\n            client.setLastResponse(receiveMessage.message);\r\n            // Client is present\r\n            switch (receiveMessage.message) {\r\n                case \"STAT\":\r\n                    statHandler.handleStatMessage(client, receiveMessage);\r\n                    break;\r\n                case \"AKEX\":\r\n                    break;\r\n                case \"TRIP\":\r\n                    switch (MessageEnums.STCStatus.valueOf(receiveMessage.status)) {\r\n                        case MessageEnums.STCStatus.ON:\r\n                            client.updateStatus(MessageEnums.STCStatus.ON);\r\n                            Processor.checkpointTripped(client.getLocation(), false);\r\n                            break;\r\n                        case MessageEnums.STCStatus.OFF:\r\n                            client.updateStatus(MessageEnums.STCStatus.OFF);\r\n                            Processor.checkpointTripped(client.getLocation(), true);\r\n                            break;\r\n                        case MessageEnums.STCStatus.ERR:\r\n                            systemStateManager.addUnresponsiveClient(client.getId(),\r\n                                    ReasonEnum.CLIENTERR);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n\r\n                    client.sendAcknowledgeMessage(MessageEnums.AKType.AKTR);\r\n                    logger.log(Level.INFO, \"Received TRIP command from Checkpoint: {0}\",\r\n                            receiveMessage.clientID);\r\n                    break;\r\n                default:\r\n                    logger.log(Level.WARNING, \"Unknown station message: {0}\",\r\n                            receiveMessage.message);\r\n                    break;\r\n            }\r\n        }, () -> {\r\n            // Client is not present\r\n            if (\"STIN\".equals(receiveMessage.message)) {\r\n                handleInitialise(receiveMessage, address, port);\r\n                logger.log(Level.INFO, \"Received STIN message from Station: {0}\",\r\n                        receiveMessage.clientID);\r\n            } else {\r\n                logger.log(Level.SEVERE, \"Attempted to get non-existent station: {0}\",\r\n                        receiveMessage.clientID);\r\n            }\r\n        });\r\n    }\r\n\r\n    // I dont think anything needs to change here except location\r\n    private void handleInitialise(ReceiveMessage receiveMessage, InetAddress address, int port) {\r\n        clientFactory.handleInitialise(receiveMessage, address, port);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/messages/MessageHandler.java b/src/main/java/org/example/messages/MessageHandler.java
--- a/src/main/java/org/example/messages/MessageHandler.java	(revision 90811cac742013b2094b5fb5eaba2a431d01cf97)
+++ b/src/main/java/org/example/messages/MessageHandler.java	(date 1729078410485)
@@ -74,7 +74,6 @@
                             break;
                         default:
                             break;
-
                     }
 
                     client.sendAcknowledgeMessage(MessageEnums.AKType.AKTR);
@@ -113,7 +112,6 @@
             switch (receiveMessage.message) {
                 case "STAT":
                     statHandler.handleStatMessage(client, receiveMessage);
-
                     break;
                 case "AKEX":
                     break;
Index: src/test/java/DatabaseTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.example.Database;\r\nimport org.example.Processor;\r\nimport org.example.client.*;\r\nimport org.example.messages.MessageSender;\r\nimport org.example.messages.StatHandler;\r\nimport org.example.state.SystemState;\r\nimport org.example.state.SystemStateManager;\r\nimport org.junit.jupiter.api.BeforeAll;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.ArgumentCaptor;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.logging.Logger;\r\n\r\nimport java.lang.reflect.Field;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\n\r\n\r\nclass DatabaseTest {\r\n\r\n    private static Database db;\r\n    private static Field instanceFieldDB;\r\n\r\n    @BeforeAll\r\n    static void setUp() {\r\n        db = Database.getInstanceTest();\r\n\r\n        try {\r\n            instanceFieldDB = Database.class.getDeclaredField(\"instance\");\r\n            instanceFieldDB.setAccessible(true);\r\n        } catch (Exception e) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    @Test\r\n    void testTheInstanceWorks() {\r\n        db.addClient(\"BR01\", new BladeRunnerClient(\"BR01\", new MessageGenerator(),\r\n                new MessageSender(null, null, 0, null)));\r\n        BladeRunnerClient c = db.getClient(\"BR01\", BladeRunnerClient.class).get();\r\n\r\n        assertNotNull(c);\r\n\r\n        try {\r\n            instanceFieldDB.set(null, null);\r\n            db = Database.getInstanceTest();\r\n        } catch (Exception e) {\r\n            System.out.println(\"hello\");\r\n        }\r\n\r\n        Optional<BladeRunnerClient> c2 = db.getClient(\"BR01\", BladeRunnerClient.class);\r\n\r\n        assertEquals(c2, Optional.empty());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/DatabaseTest.java b/src/test/java/DatabaseTest.java
--- a/src/test/java/DatabaseTest.java	(revision 90811cac742013b2094b5fb5eaba2a431d01cf97)
+++ b/src/test/java/DatabaseTest.java	(date 1729079694705)
@@ -47,7 +47,7 @@
     @Test
     void testTheInstanceWorks() {
         db.addClient("BR01", new BladeRunnerClient("BR01", new MessageGenerator(),
-                new MessageSender(null, null, 0, null)));
+                new MessageSender(null, 0, "0")));
         BladeRunnerClient c = db.getClient("BR01", BladeRunnerClient.class).get();
 
         assertNotNull(c);
Index: src/main/java/org/example/messages/MessageSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.messages;\r\n\r\nimport java.net.InetAddress;\r\n\r\npublic class MessageSender {\r\n    private final Server server;\r\n    private final InetAddress clientAddress;\r\n    private final int clientPort;\r\n    private final String clientId;\r\n\r\n    public MessageSender(Server server, InetAddress clientAddress, int clientPort,\r\n                         String clientID) {\r\n        this.server = server;\r\n        this.clientAddress = clientAddress;\r\n        this.clientPort = clientPort;\r\n        this.clientId = clientID;\r\n    }\r\n\r\n    public void send(String message, String messageType) {\r\n        server.sendMessageToClient(clientAddress, clientPort, message, messageType, clientId);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/messages/MessageSender.java b/src/main/java/org/example/messages/MessageSender.java
--- a/src/main/java/org/example/messages/MessageSender.java	(revision 90811cac742013b2094b5fb5eaba2a431d01cf97)
+++ b/src/main/java/org/example/messages/MessageSender.java	(date 1729079621152)
@@ -1,22 +1,42 @@
 package org.example.messages;
 
+import java.io.IOException;
+import java.net.DatagramPacket;
+import java.net.DatagramSocket;
 import java.net.InetAddress;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 public class MessageSender {
-    private final Server server;
+    private static final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
     private final InetAddress clientAddress;
     private final int clientPort;
     private final String clientId;
+    private DatagramSocket serverSocket;
 
-    public MessageSender(Server server, InetAddress clientAddress, int clientPort,
+    public MessageSender(InetAddress clientAddress, int clientPort,
                          String clientID) {
-        this.server = server;
         this.clientAddress = clientAddress;
         this.clientPort = clientPort;
         this.clientId = clientID;
+
+        try {
+            serverSocket = new DatagramSocket(3001);
+            logger.info("Server completed startup and listening on PORT: " + 3001);
+        } catch (Exception e) {
+            logger.log(Level.SEVERE, "Error starting up server", e);
+        }
     }
 
-    public void send(String message, String messageType) {
-        server.sendMessageToClient(clientAddress, clientPort, message, messageType, clientId);
+    public void send(String message, String type) {
+        try {
+            byte[] buffer = message.getBytes();
+            DatagramPacket sendPacket = new DatagramPacket(buffer, buffer.length, clientAddress, clientPort);
+            serverSocket.send(sendPacket);
+            logger.log(Level.INFO, "Sent {0} to client at: {1}", new Object[] {type, clientId});
+        } catch (IOException e) {
+            logger.log(Level.SEVERE, "Failed to send message to client: {0}", clientId);
+            logger.log(Level.SEVERE, "Exception: ", e);
+        }
     }
 }
Index: src/main/java/org/example/messages/Server.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.messages;\r\n\r\nimport org.example.client.ReasonEnum;\r\nimport org.example.state.SystemStateManager;\r\n\r\nimport java.io.IOException;\r\nimport java.net.DatagramPacket;\r\nimport java.net.DatagramSocket;\r\nimport java.net.InetAddress;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.concurrent.*;\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\n/**\r\n * Manages network communication with clients over UDP. It handles incoming packets, maintains a\r\n * list of connected clients, and schedules status checks.\r\n *\r\n * <p>\r\n * Utilises the Singleton pattern to ensure only one instance of the Server exists.\r\n */\r\npublic class Server implements Runnable {\r\n    public static final int PORT = 3001;\r\n\r\n    private static final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\r\n\r\n    private static final int BUFFER_SIZE = 1024;\r\n\r\n    private static final int MAX_THROUGHPUT = 50;\r\n    private static final BlockingQueue<DatagramPacket> mailbox = new LinkedBlockingQueue<>();\r\n    private final AtomicBoolean serverRunning;\r\n    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n    private final ExecutorService executorService = Executors.newFixedThreadPool(2);\r\n    private final MessageHandler messageHandler = new MessageHandler();\r\n    private DatagramSocket serverSocket;\r\n\r\n\r\n    private Server() {\r\n        serverRunning = new AtomicBoolean(true);\r\n        try {\r\n            serverSocket = new DatagramSocket(PORT);\r\n            logger.info(\"Server completed startup and listening on PORT: \" + PORT);\r\n        } catch (Exception e) {\r\n            logger.log(Level.SEVERE, \"Error starting up server\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the singleton instance of the Server.\r\n     *\r\n     * @return the singleton Server instance\r\n     */\r\n    public static Server getInstance() {\r\n        return Holder.INSTANCE;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        startConnectionListener();\r\n    }\r\n\r\n    private void startConnectionListener() {\r\n        executorService.execute(this::connectionListener);\r\n        executorService.execute(this::packetProcessor);\r\n    }\r\n\r\n    /**\r\n     * Listens for incoming UDP packets and processes them. If a client is recognized, processes the\r\n     * packet with the existing client. Otherwise, creates a new client instance and registers it.\r\n     */\r\n    private void connectionListener() {\r\n        while (serverRunning.get()) {\r\n            try {\r\n                DatagramPacket receivePacket = new DatagramPacket(new byte[BUFFER_SIZE], BUFFER_SIZE);\r\n                serverSocket.receive(receivePacket);\r\n\r\n                if (receivePacket.getLength() > 0) mailbox.add(receivePacket);\r\n            } catch (IOException e) {\r\n                logger.log(Level.SEVERE, \"Error receiving packet\", e);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void packetProcessor() {\r\n        while (serverRunning.get()) {\r\n            try {\r\n                DatagramPacket receivePacket = mailbox.take();\r\n                String message = new String(receivePacket.getData(), 0, receivePacket.getLength(),\r\n                        StandardCharsets.UTF_8);\r\n\r\n                messageHandler.handleMessage(message, receivePacket.getAddress(),\r\n                        receivePacket.getPort());\r\n            } catch (InterruptedException e) {\r\n                logger.log(Level.SEVERE, \"Packet processor was interrupted\", e);\r\n                Thread.currentThread().interrupt();\r\n            } catch (Exception e) {\r\n                logger.log(Level.SEVERE, \"Error processing packet\", e);\r\n            }\r\n        }\r\n        logger.log(Level.INFO, \"Packet processor terminated\");\r\n    }\r\n\r\n    public void sendMessageToClient(InetAddress address, int port, String message, String type,\r\n                                    String clientID) {\r\n        try {\r\n            byte[] buffer = message.getBytes();\r\n            DatagramPacket sendPacket = new DatagramPacket(buffer, buffer.length,\r\n                    address, port);\r\n            serverSocket.send(sendPacket);\r\n            logger.log(Level.INFO, \"Sent {0} to client at: {1}\", new Object[] {type, clientID});\r\n        } catch (IOException e) {\r\n            logger.log(Level.SEVERE, \"Failed to send message to client: {0}\", clientID);\r\n            logger.log(Level.SEVERE, \"Exception: \", e);\r\n        }\r\n    }\r\n\r\n    // Closes the active threads safely\r\n    public void shutdown() {\r\n        try {\r\n            if (serverSocket != null) {\r\n                serverRunning.set(false);\r\n                serverSocket.close();\r\n                scheduler.shutdownNow();\r\n                executorService.shutdownNow();\r\n\r\n                logger.log(Level.INFO, \"Server shutdown complete\");\r\n            }\r\n        } catch (Exception e) {\r\n            logger.log(Level.SEVERE, \"Error shutting down server\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Holder class for implementing the Singleton pattern.\r\n     */\r\n    private static class Holder {\r\n        private static final Server INSTANCE = new Server();\r\n\r\n        static {\r\n            Thread serverThread = new Thread(INSTANCE, \"Server-Thread\");\r\n            serverThread.start();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/messages/Server.java b/src/main/java/org/example/messages/Server.java
--- a/src/main/java/org/example/messages/Server.java	(revision 90811cac742013b2094b5fb5eaba2a431d01cf97)
+++ b/src/main/java/org/example/messages/Server.java	(date 1729079214070)
@@ -101,20 +101,6 @@
         logger.log(Level.INFO, "Packet processor terminated");
     }
 
-    public void sendMessageToClient(InetAddress address, int port, String message, String type,
-                                    String clientID) {
-        try {
-            byte[] buffer = message.getBytes();
-            DatagramPacket sendPacket = new DatagramPacket(buffer, buffer.length,
-                    address, port);
-            serverSocket.send(sendPacket);
-            logger.log(Level.INFO, "Sent {0} to client at: {1}", new Object[] {type, clientID});
-        } catch (IOException e) {
-            logger.log(Level.SEVERE, "Failed to send message to client: {0}", clientID);
-            logger.log(Level.SEVERE, "Exception: ", e);
-        }
-    }
-
     // Closes the active threads safely
     public void shutdown() {
         try {
Index: src/main/java/org/example/messages/locations.txt
===================================================================
diff --git a/src/main/java/org/example/messages/locations.txt b/src/main/java/org/example/messages/locations.txt
deleted file mode 100644
--- a/src/main/java/org/example/messages/locations.txt	(revision 90811cac742013b2094b5fb5eaba2a431d01cf97)
+++ /dev/null	(revision 90811cac742013b2094b5fb5eaba2a431d01cf97)
@@ -1,4 +0,0 @@
-/10.20.30.1933009_1
-/10.20.30.1933002_2
-/10.20.30.1933003_3
-/10.20.30.1933004_4
\ No newline at end of file
Index: src/test/java/systemManagerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.example.Database;\r\nimport org.example.Processor;\r\nimport org.example.client.AbstractClient;\r\nimport org.example.client.BladeRunnerClient;\r\nimport org.example.client.MessageGenerator;\r\nimport org.example.client.ReasonEnum;\r\nimport org.example.messages.MessageSender;\r\nimport org.example.messages.Server;\r\nimport org.example.messages.StatHandler;\r\nimport org.example.state.SystemState;\r\nimport org.example.state.SystemStateManager;\r\nimport org.junit.jupiter.api.BeforeAll;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.ArgumentCaptor;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\nimport java.lang.reflect.Field;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.logging.Logger;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nclass systemManagerTest {\r\n\r\n    private static Database db;\r\n\r\n    private static SystemStateManager sm;\r\n\r\n    private static Field instanceFieldSM;\r\n    private static Field instanceFieldDB;\r\n\r\n    private static List<String> ids;\r\n    private static List<ReasonEnum> reasons;\r\n\r\n    @BeforeAll\r\n    static void setupList() {\r\n        db = Database.getInstanceTest();\r\n        sm = SystemStateManager.getInstance();\r\n        ids = new ArrayList<>();\r\n        reasons = new ArrayList<>();\r\n\r\n        try {\r\n            instanceFieldSM = SystemStateManager.class.getDeclaredField(\"instance\");\r\n            instanceFieldSM.setAccessible(true);\r\n\r\n            instanceFieldDB = Database.class.getDeclaredField(\"instance\");\r\n            instanceFieldDB.setAccessible(true);\r\n        }\r\n        catch (Exception e) {\r\n\r\n        }\r\n\r\n        ids.add(null); reasons.add(null);\r\n        ids.add(\"\"); reasons.add(null);\r\n        ids.add(\"what?\"); reasons.add(null);\r\n        ids.add(null); reasons.add(ReasonEnum.COLLISION);\r\n        ids.add(\"waht2?\"); reasons.add(ReasonEnum.COLLISION);\r\n        ids.add(\"BR01\"); reasons.add(ReasonEnum.COLLISION);\r\n        ids.add(\"BR01\"); reasons.add(ReasonEnum.NOSTAT);\r\n        //7\r\n    }\r\n\r\n    @BeforeEach\r\n    void setUp() throws Exception {\r\n        instanceFieldDB.set(null, null);\r\n        db = Database.getInstanceTest();\r\n\r\n        // Set the field to null, effectively resetting the singleton\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n    }\r\n\r\n    @Test\r\n    void sysManagerAddUnresponsiveInWaiting() throws Exception {\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(0), reasons.get(0)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(1), reasons.get(1)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(2), reasons.get(2)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(3), reasons.get(3)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(4), reasons.get(4)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(5), reasons.get(5)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(6), reasons.get(6)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n    }\r\n\r\n    @Test\r\n    void sysManagerAddUnresponsiveInMapping() throws Exception {\r\n        sm.setState(SystemState.MAPPING);\r\n        db.addClient(\"BR01\", new BladeRunnerClient(\"BR01\", new MessageGenerator(), new MessageSender(null, null, 0, null)));\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(0), reasons.get(0)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.MAPPING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(1), reasons.get(1)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.MAPPING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(2), reasons.get(2)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.MAPPING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(3), reasons.get(3)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.MAPPING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(4), reasons.get(4)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.MAPPING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertTrue(sm.addUnresponsiveClient(ids.get(5), reasons.get(5)));\r\n        assertTrue(sm.error);\r\n        assertSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        assertTrue(sm.addUnresponsiveClient(ids.get(5), reasons.get(5)));\r\n        assertTrue(sm.error);\r\n        assertSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.MAPPING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertTrue(sm.addUnresponsiveClient(ids.get(6), reasons.get(6)));\r\n        assertTrue(sm.error);\r\n        assertSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        assertTrue(sm.addUnresponsiveClient(ids.get(6), reasons.get(6)));\r\n        assertTrue(sm.error);\r\n        assertSame(sm.getState(), SystemState.EMERGENCY);\r\n    }\r\n\r\n    @Test\r\n    void sysManagerAddUnresponsiveInRunning() throws Exception {\r\n        sm.setState(SystemState.RUNNING);\r\n        db.addClient(\"BR01\", new BladeRunnerClient(\"BR01\", new MessageGenerator(), new MessageSender(null, null, 0, null)));\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(0), reasons.get(0)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.RUNNING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(1), reasons.get(1)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.RUNNING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(2), reasons.get(2)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.RUNNING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(3), reasons.get(3)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.RUNNING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(4), reasons.get(4)));\r\n        assertFalse(sm.error);\r\n        assertNotSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.RUNNING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertTrue(sm.addUnresponsiveClient(ids.get(5), reasons.get(5)));\r\n        assertTrue(sm.error);\r\n        Thread.sleep(1000);\r\n        assertSame(SystemState.EMERGENCY, sm.getState());\r\n\r\n\r\n        assertTrue(sm.addUnresponsiveClient(ids.get(5), reasons.get(5)));\r\n        assertTrue(sm.error);\r\n        assertSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.RUNNING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertTrue(sm.addUnresponsiveClient(ids.get(6), reasons.get(6)));\r\n        assertTrue(sm.error);\r\n        assertSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n\r\n        assertTrue(sm.addUnresponsiveClient(ids.get(6), reasons.get(6)));\r\n        assertTrue(sm.error);\r\n        assertSame(sm.getState(), SystemState.EMERGENCY);\r\n\r\n    }\r\n\r\n    @Test\r\n    void sysManagerAddUnresponsiveInEmergency() throws Exception {\r\n        sm.setState(SystemState.EMERGENCY);\r\n        db.addClient(\"BR01\", new BladeRunnerClient(\"BR01\", new MessageGenerator(), new MessageSender(null, null, 0, null)));\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(0), reasons.get(0)));\r\n        assertFalse(sm.error);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.RUNNING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(1), reasons.get(1)));\r\n        assertFalse(sm.error);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.RUNNING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(2), reasons.get(2)));\r\n        assertFalse(sm.error);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.RUNNING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(3), reasons.get(3)));\r\n        assertFalse(sm.error);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.RUNNING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertFalse(sm.addUnresponsiveClient(ids.get(4), reasons.get(4)));\r\n        assertFalse(sm.error);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.RUNNING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertTrue(sm.addUnresponsiveClient(ids.get(5), reasons.get(5)));\r\n        assertTrue(sm.error);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n        sm.setState(SystemState.RUNNING);\r\n        sm.injectDatabase(db);\r\n\r\n        assertTrue(sm.addUnresponsiveClient(ids.get(6), reasons.get(6)));\r\n        assertTrue(sm.error);\r\n    }\r\n\r\n    \r\n\r\n    @Test\r\n    void sysManagerNeedstrip() throws Exception {\r\n        assertFalse(sm.needsTrip(0, false));\r\n        assertFalse(sm.error);\r\n\r\n        instanceFieldSM.set(null, null);\r\n        sm = SystemStateManager.getInstance();\r\n    }\r\n    \r\n\r\n    @Test\r\n    void sysManagersetState() throws Exception {\r\n        sm.setState(null);\r\n    }\r\n\r\n    @Test\r\n    void sysManagerRun() throws Exception {\r\n        sm.run();\r\n    }\r\n\r\n    @Test\r\n    void sysManagergetInstance() throws Exception {\r\n        sm.getInstance();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/systemManagerTest.java b/src/test/java/systemManagerTest.java
--- a/src/test/java/systemManagerTest.java	(revision 90811cac742013b2094b5fb5eaba2a431d01cf97)
+++ b/src/test/java/systemManagerTest.java	(date 1729079694719)
@@ -128,7 +128,8 @@
     @Test
     void sysManagerAddUnresponsiveInMapping() throws Exception {
         sm.setState(SystemState.MAPPING);
-        db.addClient("BR01", new BladeRunnerClient("BR01", new MessageGenerator(), new MessageSender(null, null, 0, null)));
+        db.addClient("BR01", new BladeRunnerClient("BR01", new MessageGenerator(),
+                new MessageSender(null, 0, "0")));
         sm.injectDatabase(db);
 
         assertFalse(sm.addUnresponsiveClient(ids.get(0), reasons.get(0)));
@@ -202,7 +203,7 @@
     @Test
     void sysManagerAddUnresponsiveInRunning() throws Exception {
         sm.setState(SystemState.RUNNING);
-        db.addClient("BR01", new BladeRunnerClient("BR01", new MessageGenerator(), new MessageSender(null, null, 0, null)));
+        db.addClient("BR01", new BladeRunnerClient("BR01", new MessageGenerator(), new MessageSender(null, 0, "0")));
         sm.injectDatabase(db);
 
         assertFalse(sm.addUnresponsiveClient(ids.get(0), reasons.get(0)));
@@ -281,7 +282,7 @@
     @Test
     void sysManagerAddUnresponsiveInEmergency() throws Exception {
         sm.setState(SystemState.EMERGENCY);
-        db.addClient("BR01", new BladeRunnerClient("BR01", new MessageGenerator(), new MessageSender(null, null, 0, null)));
+        db.addClient("BR01", new BladeRunnerClient("BR01", new MessageGenerator(), new MessageSender(null, 0, "0")));
         sm.injectDatabase(db);
 
         assertFalse(sm.addUnresponsiveClient(ids.get(0), reasons.get(0)));
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"1d9b5952-4092-4fc7-8340-7dd220ada861\" name=\"Changes\" comment=\"Jar\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Vchandrapati&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Vchandrapati/ENG3000MCP&quot;,\r\n    &quot;accountId&quot;: &quot;4e31187b-23c8-41a7-9e96-7c9dccea6ccc&quot;\r\n  }\r\n}</component>\r\n  <component name=\"KubernetesApiProvider\">{\r\n  &quot;isMigrated&quot;: true\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"ProjectErrors\" />\r\n  </component>\r\n  <component name=\"ProjectCodeStyleSettingsMigration\">\r\n    <option name=\"version\" value=\"2\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2mFBoeq8SVwYaBy3dnmQEg4k3Ej\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Application.Unnamed.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.MessageHandlerTest.executor&quot;: &quot;Coverage&quot;,\r\n    &quot;JUnit.MessageHandlerTest.test_CCP_STAT_MSG.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.ServerTest.testSystemStateManagerOnHighThroughput.executor&quot;: &quot;Debug&quot;,\r\n    &quot;JUnit.StatHandlerTest.executor&quot;: &quot;Coverage&quot;,\r\n    &quot;JUnit.StatHandlerTest.test_ERR.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.StatHandlerTest.test_Start_Status_1_MSG_Scheduler.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.StatHandlerTest.test_Start_Status_1_MultiClient_MSG_Scheduler.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.StatHandlerTest.test_Start_Status_3_MSG_Scheduler.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.StatHandlerTest.test_Start_Status_3_MultiClient_MSG_Scheduler.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.StatHandlerTest.test_checkIfClientIsUnresponsive_false.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.StatHandlerTest.test_checkIfClientIsUnresponsive_true.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.StatHandlerTest.test_shutdown.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;SONARLINT_PRECOMMIT_ANALYSIS&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;experimental&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/Programming/Java/ENG3000MCP/src/test/java&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.sourceCode&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Programming\\Java\\ENG3000MCP\\src\\test\\java\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Programming\\Java\\ENG3000MCP\\src\\test\\java\" />\r\n      <recent name=\"D:\\Programming\\Java\\ENG3000MCP\\src\\main\\java\\org\\example\\messages\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"JUnit.ServerTest\">\r\n    <configuration name=\"Unnamed\" type=\"Application\" factoryName=\"Application\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.example.App\" />\r\n      <module name=\"ENG3000MCP2.0\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MessageHandlerTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ENG3000MCP2.0\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"MessageHandlerTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MessageHandlerTest.test_CCP_STAT_MSG\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ENG3000MCP2.0\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"MessageHandlerTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"test_CCP_STAT_MSG\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ServerTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ENG3000MCP2.0\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"ServerTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"StatHandlerTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ENG3000MCP2.0\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"StatHandlerTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"StatHandlerTest.test_Start_Status_3_MultiClient_MSG_Scheduler\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ENG3000MCP2.0\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"StatHandlerTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"test_Start_Status_3_MultiClient_MSG_Scheduler\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JUnit.ServerTest\" />\r\n        <item itemvalue=\"JUnit.MessageHandlerTest\" />\r\n        <item itemvalue=\"JUnit.MessageHandlerTest.test_CCP_STAT_MSG\" />\r\n        <item itemvalue=\"JUnit.StatHandlerTest\" />\r\n        <item itemvalue=\"JUnit.StatHandlerTest.test_Start_Status_3_MultiClient_MSG_Scheduler\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9f38398b9061-39b83d9b5494-intellij.indexing.shared.core-IU-241.18034.62\" />\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-IU-241.18034.62\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"1d9b5952-4092-4fc7-8340-7dd220ada861\" name=\"Changes\" comment=\"\" />\r\n      <created>1726662619710</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1726662619710</updated>\r\n      <workItem from=\"1726662620775\" duration=\"12389000\" />\r\n      <workItem from=\"1726714384225\" duration=\"3166000\" />\r\n      <workItem from=\"1726752285766\" duration=\"7356000\" />\r\n      <workItem from=\"1727093956805\" duration=\"221000\" />\r\n      <workItem from=\"1727094523589\" duration=\"4485000\" />\r\n      <workItem from=\"1727151100753\" duration=\"5434000\" />\r\n      <workItem from=\"1727174658497\" duration=\"15000\" />\r\n      <workItem from=\"1727190317781\" duration=\"938000\" />\r\n      <workItem from=\"1727334859992\" duration=\"4665000\" />\r\n      <workItem from=\"1727353281317\" duration=\"2659000\" />\r\n      <workItem from=\"1727423267711\" duration=\"1774000\" />\r\n      <workItem from=\"1727610779503\" duration=\"107000\" />\r\n      <workItem from=\"1727756919956\" duration=\"5487000\" />\r\n      <workItem from=\"1727784351705\" duration=\"3450000\" />\r\n      <workItem from=\"1728203512376\" duration=\"15480000\" />\r\n      <workItem from=\"1728346527791\" duration=\"4334000\" />\r\n      <workItem from=\"1728358965380\" duration=\"13378000\" />\r\n      <workItem from=\"1728454873014\" duration=\"4358000\" />\r\n      <workItem from=\"1728459319167\" duration=\"2407000\" />\r\n      <workItem from=\"1728518327776\" duration=\"10121000\" />\r\n      <workItem from=\"1728528588832\" duration=\"2275000\" />\r\n      <workItem from=\"1728631997087\" duration=\"1413000\" />\r\n      <workItem from=\"1728702329898\" duration=\"652000\" />\r\n      <workItem from=\"1728906571524\" duration=\"5134000\" />\r\n      <workItem from=\"1728984405168\" duration=\"8320000\" />\r\n      <workItem from=\"1729003123160\" duration=\"2831000\" />\r\n      <workItem from=\"1729042326804\" duration=\"1333000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726665832685</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726665832685</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726668962356</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726668962356</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726670335389</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726670335389</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726670342536</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726670342536</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726670346212</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726670346212</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Made some changes to comply with sonarlint and rerouted messages in emergency state\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726671239958</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726671239958</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Made some changes to comply with sonarlint and rerouted messages in emergency state\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726714422632</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726714422632</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Updated some server logic and fixed message handler location\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726755404711</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726755404711</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Updated some server logic and fixed message handler location\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726755423120</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726755423120</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Updated visualiser to use different table for showing trains\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726757017143</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726757017143</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Updated visualiser to use different table for showing trains\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726757060265</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726757060265</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Updated visualiser to be more cohesive and added timer and did some sonarlint fixes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727153970881</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727153970881</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Renamed everything to blade runner and cleaned up code\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727340096208</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727340096208</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Refactored Database\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727353741185</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727353741185</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Fixed optional bug\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727423504889</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727423504889</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Fixed optional bug\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727424352865</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727424352865</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Refactored some processor code\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727770188427</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727770188427</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Added cool new panel\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727792285045</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727792285045</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Updated message handler to verify execs\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728359031782</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728359031782</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Fixed fuck up\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728360882451</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728360882451</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Changed stat message to change client status\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728367233839</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728367233839</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"refactored processor and fixed up some bugs\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728391832555</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728391832555</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728528001550</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728528001550</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728528043100</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728528043100</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728528792220</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728528792220</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728528804324</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728528804324</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728529120402</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728529120402</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Added tests\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728702691671</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728702691671</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Added tests\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728912684623</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728912684623</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"Jar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729056879138</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729056879138</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"31\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Made some changes to comply with sonarlint\" />\r\n    <MESSAGE value=\"Made some changes to comply with sonarlint and rerouted messages in emergency state\" />\r\n    <MESSAGE value=\"Updated some server logic and fixed message handler location\" />\r\n    <MESSAGE value=\"Updated visualiser to use different table for showing trains\" />\r\n    <MESSAGE value=\"Updated visualiser to be more cohesive and added timer and did some sonarlint fixes\" />\r\n    <MESSAGE value=\"Reformatted code to be cleaner\" />\r\n    <MESSAGE value=\"Renamed everything to blade runner and cleaned up code\" />\r\n    <MESSAGE value=\"Refactored Database\" />\r\n    <MESSAGE value=\"Fixed optional bug\" />\r\n    <MESSAGE value=\"Refactored some processor code\" />\r\n    <MESSAGE value=\"Added cool new panel\" />\r\n    <MESSAGE value=\"Updated message handler to verify execs\" />\r\n    <MESSAGE value=\"Fixed fuck up\" />\r\n    <MESSAGE value=\"Changed stat message to change client status\" />\r\n    <MESSAGE value=\"refactored processor and fixed up some bugs\" />\r\n    <MESSAGE value=\"Moved subsystems into packages and seperated client\" />\r\n    <MESSAGE value=\"Added tests\" />\r\n    <MESSAGE value=\"Jar\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Jar\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/org/example/messages/MessageHandler.java</url>\r\n          <line>60</line>\r\n          <option name=\"timeStamp\" value=\"14\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/ENG3000MCP$StatHandlerTest.ic\" NAME=\"StatHandlerTest Coverage Results\" MODIFIED=\"1729003221320\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"true\" />\r\n    <SUITE FILE_PATH=\"coverage/ENG3000MCP$MessageHandlerTest.ic\" NAME=\"MessageHandlerTest Coverage Results\" MODIFIED=\"1729005894033\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 90811cac742013b2094b5fb5eaba2a431d01cf97)
+++ b/.idea/workspace.xml	(date 1729084126073)
@@ -6,6 +6,14 @@
   <component name="ChangeListManager">
     <list default="true" id="1d9b5952-4092-4fc7-8340-7dd220ada861" name="Changes" comment="Jar">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/messages/ClientFactory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/messages/ClientFactory.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/messages/MessageHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/messages/MessageHandler.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/messages/MessageSender.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/messages/MessageSender.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/messages/Server.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/messages/Server.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/messages/locations.txt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/state/SystemStateManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/state/SystemStateManager.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/DatabaseTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/DatabaseTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/systemManagerTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/systemManagerTest.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -208,7 +216,7 @@
       <workItem from="1728906571524" duration="5134000" />
       <workItem from="1728984405168" duration="8320000" />
       <workItem from="1729003123160" duration="2831000" />
-      <workItem from="1729042326804" duration="1333000" />
+      <workItem from="1729042326804" duration="10124000" />
     </task>
     <task id="LOCAL-00001" summary="Made some changes to comply with sonarlint">
       <option name="closed" value="true" />
@@ -450,7 +458,23 @@
       <option name="project" value="LOCAL" />
       <updated>1729056879138</updated>
     </task>
-    <option name="localTasksCounter" value="31" />
+    <task id="LOCAL-00031" summary="Jar">
+      <option name="closed" value="true" />
+      <created>1729057252068</created>
+      <option name="number" value="00031" />
+      <option name="presentableId" value="LOCAL-00031" />
+      <option name="project" value="LOCAL" />
+      <updated>1729057252068</updated>
+    </task>
+    <task id="LOCAL-00032" summary="Jar">
+      <option name="closed" value="true" />
+      <created>1729057994629</created>
+      <option name="number" value="00032" />
+      <option name="presentableId" value="LOCAL-00032" />
+      <option name="project" value="LOCAL" />
+      <updated>1729057994629</updated>
+    </task>
+    <option name="localTasksCounter" value="33" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -487,17 +511,6 @@
     <MESSAGE value="Added tests" />
     <MESSAGE value="Jar" />
     <option name="LAST_COMMIT_MESSAGE" value="Jar" />
-  </component>
-  <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/src/main/java/org/example/messages/MessageHandler.java</url>
-          <line>60</line>
-          <option name="timeStamp" value="14" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/ENG3000MCP$StatHandlerTest.ic" NAME="StatHandlerTest Coverage Results" MODIFIED="1729003221320" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="true" />
