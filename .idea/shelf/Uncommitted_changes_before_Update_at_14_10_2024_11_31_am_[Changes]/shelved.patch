Index: src/main/java/org/example/Processor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n\r\nimport org.example.client.BladeRunnerClient;\r\nimport org.example.client.CheckpointClient;\r\nimport org.example.client.StationClient;\r\nimport org.example.messages.MessageEnums;\r\nimport org.example.client.ReasonEnum;\r\nimport org.example.state.SystemStateManager;\r\n\r\nimport java.util.Optional;\r\nimport java.util.concurrent.*;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\n// [x] need to check backwards\r\n\r\npublic class Processor {\r\n    private static final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\r\n    private static final Database db = Database.getInstance();\r\n    private static int totalBlocks;\r\n    private static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n\r\n    private Processor() {}\r\n\r\n    public static void checkpointTripped(int checkpointTripped, boolean untrip) {\r\n        SystemStateManager systemStateManager = SystemStateManager.getInstance();\r\n        totalBlocks = db.getBlockCount();\r\n\r\n        if (!isNextBlockValid(checkpointTripped)) {\r\n            logger.log(Level.WARNING, \"Inconsistent checkpoint trip : {0} on trip boolean : {1}\",\r\n                    new Object[]{checkpointTripped, untrip});\r\n            return;\r\n        }\r\n\r\n        if (systemStateManager.needsTrip(checkpointTripped, untrip)) {\r\n            logger.log(Level.WARNING, \"Sent to mapping state\");\r\n            return;\r\n        }\r\n\r\n        Optional<BladeRunnerClient> reversingBladeRunner = getBladeRunner(checkpointTripped);\r\n        Boolean reversing = false;\r\n\r\n        if (reversingBladeRunner.isPresent()\r\n                && reversingBladeRunner.get().getStatus() == MessageEnums.CCPStatus.RSLOWC) {\r\n            reversing = true;\r\n        }\r\n\r\n\r\n        // checks if the checkpoint before tripped checkpoint contains a blade runner\r\n        if(!reversing) {\r\n            int previousCheckpoint = calculateNextBlock(checkpointTripped, -1);\r\n            if (!db.isBlockOccupied(previousCheckpoint)) {\r\n                String id = (checkpointTripped > 9) ? \"CP\" + checkpointTripped : \"CP0\" + checkpointTripped;\r\n                logger.log(Level.WARNING, \"Inconsistent checkpoint trip : {0} on trip boolean : {1}\",\r\n                        new Object[]{id, untrip});\r\n                systemStateManager.addUnresponsiveClient(id, ReasonEnum.INCORTRIP);\r\n            } else {\r\n                handleTrip(checkpointTripped, previousCheckpoint, untrip);\r\n            }\r\n        } else {\r\n            reverseTrip(reversingBladeRunner.get(), checkpointTripped, untrip);\r\n        }\r\n    }\r\n\r\n    private static void handleTrip(int checkpointTripped, int previousCheckpoint, boolean untrip) {\r\n        // get the blade runner of the block before the current tripped checkpoint\r\n        Optional<BladeRunnerClient> bladeRunnerOptional = getBladeRunner(previousCheckpoint);\r\n\r\n        if (bladeRunnerOptional.isEmpty()) {\r\n            logger.log(Level.WARNING, \"Tried to get blade runner at checkpoint {0} but failed\", previousCheckpoint);\r\n            return;\r\n        }\r\n\r\n        BladeRunnerClient bladeRunner = bladeRunnerOptional.get();\r\n\r\n        // checks if tripped block is full, if so stop\r\n        if (db.isBlockOccupied(checkpointTripped)) {\r\n            bladeRunnerOptional.get().sendExecuteMessage(MessageEnums.CCPAction.STOPC);\r\n            if (untrip) {\r\n                String id = bladeRunnerOptional.get().getId();\r\n                logger.log(Level.WARNING, \"Multiple blade runners in the same zone, includes : {0}\", id);\r\n                SystemStateManager.getInstance().addUnresponsiveClient(id, ReasonEnum.COLLISION);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // checks if next block is full, if so stop only if untrip\r\n        int nextCheckpoint = calculateNextBlock(checkpointTripped, 1);\r\n\r\n        if (isCheckpointStation(nextCheckpoint)) {\r\n            bladeRunner.sendExecuteMessage(MessageEnums.CCPAction.FSLOWC);\r\n            //give station blade runner\r\n        }\r\n\r\n        if (db.isBlockOccupied(nextCheckpoint) && untrip) {\r\n            bladeRunnerOptional.get().sendExecuteMessage(MessageEnums.CCPAction.STOPC);\r\n        }\r\n\r\n\r\n\r\n        // only change zone if untrip\r\n        if (untrip) {\r\n            db.updateBladeRunnerBlock(bladeRunner.getId(), checkpointTripped);\r\n            bladeRunner.changeZone(checkpointTripped);\r\n\r\n            if (isCheckpointStation(checkpointTripped) && !bladeRunner.isDockedAtStation()) { // overshot Station\r\n                bladeRunnerOverShot(bladeRunner, checkpointTripped);\r\n            } else {\r\n                bladeRunner.setDockedAtStation(false);\r\n                checkForTraffic(previousCheckpoint);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void reverseTrip(BladeRunnerClient reversingBladeRunner, int checkpointTripped, boolean untrip) {\r\n        // checks if train is reversing \"legally\"\r\n        if (!isCheckpointStation(checkpointTripped)\r\n                && reversingBladeRunner.getStatus() == MessageEnums.CCPStatus.RSLOWC) {\r\n            // train was reversing randomly\r\n            reversingBladeRunner.sendExecuteMessage(MessageEnums.CCPAction.FFASTC);\r\n            reversingBladeRunner.updateStatus(MessageEnums.CCPStatus.FFASTC);\r\n            return;\r\n        }\r\n\r\n        int previousBlock = calculateNextBlock(checkpointTripped, -1);\r\n\r\n        if (!untrip) {\r\n            if (db.isBlockOccupied(previousBlock)) {\r\n                // bladeRunner is reversing but the previous block has a bladeRunner in it. Must stop\r\n                reversingBladeRunner.sendExecuteMessage(MessageEnums.CCPAction.STOPC);\r\n                reversingBladeRunner.updateStatus(MessageEnums.CCPStatus.STOPC);\r\n            }\r\n        }\r\n\r\n        if (untrip) {\r\n            reversingBladeRunner.sendExecuteMessage(MessageEnums.CCPAction.FSLOWC);\r\n            reversingBladeRunner.updateStatus(MessageEnums.CCPStatus.FSLOWC);\r\n\r\n            db.updateBladeRunnerBlock(reversingBladeRunner.getId(), previousBlock);\r\n            reversingBladeRunner.changeZone(previousBlock);\r\n        }\r\n\r\n    }\r\n\r\n    private static boolean isCheckpointStation(int checkpoint) {\r\n        String id = checkpoint > 9 ? \"ST\" + checkpoint : \"ST0\" + checkpoint;\r\n        return db.getClient(id, StationClient.class).isPresent();\r\n    }\r\n\r\n    private static Optional<BladeRunnerClient> getBladeRunner(int checkpoint) {\r\n        String bladeRunnerID = db.getLastBladeRunnerInBlock(checkpoint);\r\n\r\n        if (bladeRunnerID == null) {\r\n            logger.log(Level.WARNING, \"Tried to get blade runner at checkpoint {0} but failed\", checkpoint);\r\n            return Optional.empty();\r\n        }\r\n\r\n        return db.getClient(bladeRunnerID, BladeRunnerClient.class);\r\n    }\r\n\r\n    // frees ONE blade runner behind the current, he will subsequently free the rest\r\n    // by moving\r\n    private static void checkForTraffic(int checkpoint) {\r\n        // check block behind\r\n        int blockBefore = calculateNextBlock(checkpoint, -1);\r\n        if (db.isBlockOccupied(blockBefore)) {\r\n            Optional<BladeRunnerClient> bladeRunnerOptional = getBladeRunner(blockBefore);\r\n            bladeRunnerOptional.ifPresent(br -> br.sendExecuteMessage(MessageEnums.CCPAction.FFASTC));\r\n        }\r\n    }\r\n\r\n    public static int calculateNextBlock(int checkpoint, int direction) {\r\n        totalBlocks = db.getBlockCount();\r\n\r\n        while (true) {\r\n            checkpoint += direction;\r\n            if (checkpoint > totalBlocks)\r\n                checkpoint = 1;\r\n\r\n            if (checkpoint < 1)\r\n                checkpoint = totalBlocks;\r\n\r\n            if (isNextBlockValid(checkpoint)) {\r\n                return checkpoint;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static boolean isNextBlockValid(int checkpoint) {\r\n        String cpId = checkpoint == totalBlocks ? \"CP\" + checkpoint : \"CP0\" + checkpoint;\r\n        String stId = checkpoint == totalBlocks ? \"ST\" + checkpoint : \"ST0\" + checkpoint;\r\n        return db.getClient(cpId, CheckpointClient.class).isPresent()\r\n                || db.getClient(stId, StationClient.class).isPresent();\r\n    }\r\n\r\n    private static void trainAligned() {\r\n        // Nothing needed at the moment\r\n    }\r\n\r\n    public static void bladeRunnerStopped(String bladeRunnerID) {\r\n        Optional<BladeRunnerClient> bladeRunnerOp = db.getClient(bladeRunnerID, BladeRunnerClient.class);\r\n        if (bladeRunnerOp.isPresent()) {\r\n            BladeRunnerClient bladeRunner = bladeRunnerOp.get();\r\n            bladeRunner.sendExecuteMessage(MessageEnums.CCPAction.STOPO);\r\n            bladeRunner.updateStatus(MessageEnums.CCPStatus.STOPO);\r\n\r\n            int stationCheckpoint = calculateNextBlock(bladeRunner.getZone(), 1);\r\n            Optional<StationClient> sc = db.getClient(\"ST0\" + stationCheckpoint, StationClient.class);\r\n            logger.log(Level.FINEST, \"ST0\" + stationCheckpoint);\r\n            if (sc.isPresent()) {\r\n                StationClient station = sc.get();\r\n                station.sendExecuteMessage(MessageEnums.STCAction.OPEN);\r\n                station.updateStatus(MessageEnums.STCStatus.ONOPEN);\r\n                scheduler.schedule(() -> stationBuffer(bladeRunner, sc.get()), 5, TimeUnit.SECONDS);\r\n            }\r\n\r\n\r\n            // time for 5 seconds or whatever\r\n            bladeRunner.setDockedAtStation(true);\r\n            // set speed to forward/ back to forward\r\n        }\r\n    }\r\n\r\n    public static void bladeRunnerOverShot(BladeRunnerClient bladeRunner, int bladeRunnerZone) {\r\n        Optional<BladeRunnerClient> br = getBladeRunner(calculateNextBlock(bladeRunnerZone, -2));\r\n\r\n        if (br.isPresent()) {\r\n            br.get().sendExecuteMessage(MessageEnums.CCPAction.STOPC);\r\n            br.get().updateStatus(MessageEnums.CCPStatus.STOPC);\r\n        }\r\n\r\n        bladeRunner.sendExecuteMessage(MessageEnums.CCPAction.RSLOWC);\r\n        bladeRunner.updateStatus(MessageEnums.CCPStatus.RSLOWC);\r\n    }\r\n\r\n\r\n    private static void stationBuffer(BladeRunnerClient br, StationClient station){\r\n        br.sendExecuteMessage(MessageEnums.CCPAction.FFASTC);\r\n        br.updateStatus(MessageEnums.CCPStatus.FFASTC);\r\n        station.sendExecuteMessage(MessageEnums.STCAction.CLOSE);\r\n        station.updateStatus(MessageEnums.STCStatus.OFF);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/Processor.java b/src/main/java/org/example/Processor.java
--- a/src/main/java/org/example/Processor.java	(revision 73905684fd94ecd12a8bbb7db62d0d827bafc9a5)
+++ b/src/main/java/org/example/Processor.java	(date 1728825787629)
@@ -38,12 +38,8 @@
         }
 
         Optional<BladeRunnerClient> reversingBladeRunner = getBladeRunner(checkpointTripped);
-        Boolean reversing = false;
-
-        if (reversingBladeRunner.isPresent()
-                && reversingBladeRunner.get().getStatus() == MessageEnums.CCPStatus.RSLOWC) {
-            reversing = true;
-        }
+        boolean reversing = reversingBladeRunner.isPresent()
+                && reversingBladeRunner.get().getStatus() == MessageEnums.CCPStatus.RSLOWC;
 
 
         // checks if the checkpoint before tripped checkpoint contains a blade runner
@@ -124,13 +120,12 @@
 
         int previousBlock = calculateNextBlock(checkpointTripped, -1);
 
-        if (!untrip) {
-            if (db.isBlockOccupied(previousBlock)) {
+        if (!untrip && db.isBlockOccupied(previousBlock)) {
                 // bladeRunner is reversing but the previous block has a bladeRunner in it. Must stop
                 reversingBladeRunner.sendExecuteMessage(MessageEnums.CCPAction.STOPC);
                 reversingBladeRunner.updateStatus(MessageEnums.CCPStatus.STOPC);
-            }
         }
+
 
         if (untrip) {
             reversingBladeRunner.sendExecuteMessage(MessageEnums.CCPAction.FSLOWC);
Index: src/main/java/org/example/messages/MessageHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.messages;\r\n\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.example.*;\r\nimport org.example.client.BladeRunnerClient;\r\nimport org.example.client.CheckpointClient;\r\nimport org.example.client.ReasonEnum;\r\nimport org.example.client.StationClient;\r\nimport org.example.state.SystemStateManager;\r\n\r\nimport java.net.InetAddress;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\npublic class MessageHandler {\r\n    private static final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\r\n    private static final ObjectMapper objectMapper = new ObjectMapper();\r\n    private static final Database db = Database.getInstance();\r\n    private static final SystemStateManager systemStateManager = SystemStateManager.getInstance();\r\n    private static final StatHandler statHandler = StatHandler.getInstance();\r\n\r\n    public void handleMessage(String message, InetAddress address, int port) {\r\n        try {\r\n            ReceiveMessage receiveMessage = objectMapper.readValue(message, ReceiveMessage.class);\r\n\r\n            // Handle based on the client type\r\n            switch (receiveMessage.clientType) {\r\n                case \"CCP\":\r\n                    handleCCPMessage(receiveMessage, address, port);\r\n                    break;\r\n                case \"STC\":\r\n                    handleSTCMessage(receiveMessage, address, port);\r\n                    break;\r\n                case \"CPC\":\r\n                    handleCPCMessage(receiveMessage, address, port);\r\n                    break;\r\n                default:\r\n                    logger.log(Level.WARNING, \"Unknown client type: {0}\",\r\n                            receiveMessage.clientType);\r\n            }\r\n        } catch (JsonProcessingException e) {\r\n            logger.log(Level.SEVERE, \"Failed to parse message: {0} \\nException: {1}\",\r\n                    new Object[] {message, e.getMessage()});\r\n        } catch (Exception e) {\r\n            logger.log(Level.FINEST, \"{0}\", message);\r\n            logger.log(Level.SEVERE,\r\n                    \"Unexpected error handling message from {0}:{1} \\nException: {2}\",\r\n                    new Object[] {address, port, e});\r\n\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Handles all checkpoint messages\r\n    private void handleCPCMessage(ReceiveMessage receiveMessage, InetAddress address, int port) {\r\n        db.getClient(receiveMessage.clientID, CheckpointClient.class).ifPresentOrElse(client -> {\r\n            client.setLastResponse(receiveMessage.message);\r\n            // Client is present\r\n            switch (receiveMessage.message) {\r\n                case \"TRIP\":\r\n                    switch (MessageEnums.CPCStatus.valueOf(receiveMessage.status)) {\r\n                        case MessageEnums.CPCStatus.ON:\r\n                            client.updateStatus(MessageEnums.CPCStatus.ON);\r\n                            Processor.checkpointTripped(client.getLocation(), false);\r\n                            break;\r\n                        case MessageEnums.CPCStatus.OFF:\r\n                            client.updateStatus(MessageEnums.CPCStatus.OFF);\r\n                            Processor.checkpointTripped(client.getLocation(), true);\r\n                            break;\r\n                        case MessageEnums.CPCStatus.ERR:\r\n                            systemStateManager.addUnresponsiveClient(client.getId(),\r\n                                    ReasonEnum.CLIENTERR);\r\n                            break;\r\n                        default:\r\n                            break;\r\n\r\n                    }\r\n\r\n                    client.sendAcknowledgeMessage(MessageEnums.AKType.AKTR);\r\n                    logger.log(Level.INFO, \"Received TRIP command from Checkpoint: {0}\",\r\n                            receiveMessage.clientID);\r\n                    break;\r\n                case \"STAT\":\r\n                    statHandler.handleStatMessage(client, receiveMessage);\r\n                    break;\r\n                case \"AKEX\":\r\n                    break;\r\n                default:\r\n                    logger.log(Level.SEVERE, \"Failed to handle checkpoint message: {0}\",\r\n                            receiveMessage);\r\n                    break;\r\n            }\r\n        }, () -> {\r\n            // Client is not present\r\n            if (\"CPIN\".equals(receiveMessage.message)) {\r\n                handleInitialise(receiveMessage, address, port);\r\n\r\n                logger.log(Level.INFO, \"Received CPIN message from Checkpoint: {0}\",\r\n                        receiveMessage.clientID);\r\n            } else {\r\n                logger.log(Level.SEVERE, \"Attempted to get non-existent checkpoint: {0}\",\r\n                        receiveMessage.clientID);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private void handleCCPMessage(ReceiveMessage receiveMessage, InetAddress address, int port) {\r\n        db.getClient(receiveMessage.clientID, BladeRunnerClient.class).ifPresentOrElse(client -> {\r\n            client.setLastResponse(receiveMessage.message);\r\n            // Client is present\r\n            switch (receiveMessage.message) {\r\n                case \"STAT\":\r\n                    statHandler.handleStatMessage(client, receiveMessage);\r\n\r\n                    break;\r\n                case \"AKEX\":\r\n                    break;\r\n                default:\r\n                    logger.log(Level.WARNING, \"Unknown CCP message: {0}\", receiveMessage.message);\r\n                    break;\r\n            }\r\n        }, () -> {\r\n            // Client is not present\r\n            if (\"CCIN\".equals(receiveMessage.message)) {\r\n                handleInitialise(receiveMessage, address, port);\r\n                logger.log(Level.INFO, \"Received CCIN message from Blade Runner: {0}\",\r\n                        receiveMessage.clientID);\r\n            } else {\r\n                logger.log(Level.SEVERE, \"Attempted to get non-existent bladerunner: {0}\",\r\n                        receiveMessage.clientID);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void handleSTCMessage(ReceiveMessage receiveMessage, InetAddress address, int port) {\r\n        db.getClient(receiveMessage.clientID, StationClient.class).ifPresentOrElse(client -> {\r\n            client.setLastResponse(receiveMessage.message);\r\n            // Client is present\r\n            switch (receiveMessage.message) {\r\n                case \"STAT\":\r\n                    statHandler.handleStatMessage(client, receiveMessage);\r\n                    break;\r\n                case \"AKEX\":\r\n                    break;\r\n                case \"TRIP\":\r\n                    switch (MessageEnums.STCStatus.valueOf(receiveMessage.status)) {\r\n                        case MessageEnums.STCStatus.ON:\r\n                            client.updateStatus(MessageEnums.STCStatus.ON);\r\n                            Processor.checkpointTripped(client.getLocation(), false);\r\n                            break;\r\n                        case MessageEnums.STCStatus.OFF:\r\n                            client.updateStatus(MessageEnums.STCStatus.OFF);\r\n                            Processor.checkpointTripped(client.getLocation(), true);\r\n                            break;\r\n                        case MessageEnums.STCStatus.ERR:\r\n                            systemStateManager.addUnresponsiveClient(client.getId(),\r\n                                    ReasonEnum.CLIENTERR);\r\n                            break;\r\n                        default:\r\n                            break;\r\n\r\n                    }\r\n\r\n                    client.sendAcknowledgeMessage(MessageEnums.AKType.AKTR);\r\n                    logger.log(Level.INFO, \"Received TRIP command from Checkpoint: {0}\",\r\n                            receiveMessage.clientID);\r\n                    break;\r\n                default:\r\n                    logger.log(Level.WARNING, \"Unknown station message: {0}\",\r\n                            receiveMessage.message);\r\n                    break;\r\n            }\r\n        }, () -> {\r\n            // Client is not present\r\n            if (\"STIN\".equals(receiveMessage.message)) {\r\n                handleInitialise(receiveMessage, address, port);\r\n                logger.log(Level.INFO, \"Received STIN message from Station: {0}\",\r\n                        receiveMessage.clientID);\r\n            } else {\r\n                logger.log(Level.SEVERE, \"Attempted to get non-existent station: {0}\",\r\n                        receiveMessage.clientID);\r\n            }\r\n        });\r\n    }\r\n\r\n    // I dont think anything needs to change here except location\r\n    private void handleInitialise(ReceiveMessage receiveMessage, InetAddress address, int port) {\r\n        ClientFactory.getInstance().handleInitialise(receiveMessage, address, port);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/messages/MessageHandler.java b/src/main/java/org/example/messages/MessageHandler.java
--- a/src/main/java/org/example/messages/MessageHandler.java	(revision 73905684fd94ecd12a8bbb7db62d0d827bafc9a5)
+++ b/src/main/java/org/example/messages/MessageHandler.java	(date 1728837087416)
@@ -74,7 +74,6 @@
                             break;
                         default:
                             break;
-
                     }
 
                     client.sendAcknowledgeMessage(MessageEnums.AKType.AKTR);
@@ -113,7 +112,6 @@
             switch (receiveMessage.message) {
                 case "STAT":
                     statHandler.handleStatMessage(client, receiveMessage);
-
                     break;
                 case "AKEX":
                     break;
Index: src/main/java/org/example/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n\r\nimport org.example.messages.ClientFactory;\r\nimport org.example.messages.Server;\r\nimport org.example.messages.StatHandler;\r\nimport org.example.state.SystemStateManager;\r\nimport org.example.visualiser.CommandHandler;\r\nimport org.example.visualiser.VisualiserScreen;\r\n\r\nimport javax.swing.*;\r\n\r\npublic class App {\r\n    private static volatile boolean isRunning = true;\r\n    private static Server server;\r\n    private static StatHandler statReq;\r\n    private static SystemStateManager systemStateManager;\r\n    private static VisualiserScreen screen;\r\n    private static ClientFactory clinetCreator;\r\n\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            screen = new VisualiserScreen();\r\n            screen.setVisible(true);\r\n            startMCP();\r\n        });\r\n    }\r\n\r\n    public static void startMCP() {\r\n        new Thread(() -> {\r\n            systemStateManager = SystemStateManager.getInstance();\r\n            clinetCreator = ClientFactory.getInstance();\r\n            clinetCreator.readFromFile(\"src/main/java/org/example/messages/locations.txt\");\r\n            server = Server.getInstance();\r\n            statReq = StatHandler.getInstance();\r\n            statReq.startStatusScheduler();\r\n\r\n\r\n            // main loop for program\r\n            while (isRunning()) {\r\n                systemStateManager.run();\r\n            }\r\n        }).start();\r\n    }\r\n\r\n    // shutdown entire program\r\n    public static void shutdown() {\r\n        server.shutdown();\r\n        statReq.shutdown();\r\n        setRunning(false);\r\n        CommandHandler.shutdown();\r\n        Thread.currentThread().interrupt();\r\n    }\r\n\r\n    // Getter for isRunning\r\n    public static boolean isRunning() {\r\n        return isRunning;\r\n    }\r\n\r\n    // Setter for isRunning with additional validation if needed\r\n    public static void setRunning(boolean running) {\r\n        isRunning = running;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/App.java b/src/main/java/org/example/App.java
--- a/src/main/java/org/example/App.java	(revision 73905684fd94ecd12a8bbb7db62d0d827bafc9a5)
+++ b/src/main/java/org/example/App.java	(date 1728828001301)
@@ -15,7 +15,7 @@
     private static StatHandler statReq;
     private static SystemStateManager systemStateManager;
     private static VisualiserScreen screen;
-    private static ClientFactory clinetCreator;
+    private static ClientFactory clientCreator;
 
     public static void main(String[] args) {
         SwingUtilities.invokeLater(() -> {
@@ -28,8 +28,8 @@
     public static void startMCP() {
         new Thread(() -> {
             systemStateManager = SystemStateManager.getInstance();
-            clinetCreator = ClientFactory.getInstance();
-            clinetCreator.readFromFile("src/main/java/org/example/messages/locations.txt");
+            clientCreator = ClientFactory.getInstance();
+            clientCreator.readFromFile("src/main/java/org/example/messages/locations.txt");
             server = Server.getInstance();
             statReq = StatHandler.getInstance();
             statReq.startStatusScheduler();
Index: src/main/java/org/example/messages/StatHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.messages;\r\n\r\nimport org.example.Database;\r\nimport org.example.Processor;\r\nimport org.example.client.AbstractClient;\r\nimport org.example.client.ReasonEnum;\r\nimport org.example.state.SystemState;\r\nimport org.example.state.SystemStateManager;\r\n\r\nimport java.util.List;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\npublic class StatHandler {\r\n    private static final long STAT_INTERVAL_SECONDS = 2000; // Set time later\r\n    private final Object lock = new Object();\r\n    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n    private static final Database db = Database.getInstance();\r\n    private static final SystemStateManager systemStateManager = SystemStateManager.getInstance();\r\n    private static final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\r\n\r\n    public static StatHandler getInstance() {\r\n        return Holder.INSTANCE;\r\n    }\r\n\r\n    private static class Holder {\r\n        private static final StatHandler INSTANCE = new StatHandler();\r\n    }\r\n\r\n    // send stats at specified intervals\r\n    public void startStatusScheduler() {\r\n        scheduler.scheduleAtFixedRate(() -> {\r\n            List<AbstractClient> clients = db.getClients();\r\n            synchronized (lock) {\r\n                for (AbstractClient client : clients) {\r\n                    client.sendStatusMessage();\r\n                    client.nowExpectingStat();\r\n                    checkIfClientIsUnresponsive(client);\r\n                }\r\n            }\r\n        }, 0, STAT_INTERVAL_SECONDS, TimeUnit.MILLISECONDS);\r\n    }\r\n\r\n    private void checkIfClientIsUnresponsive(AbstractClient client) {\r\n        if (client.checkResponsive()) {\r\n            SystemStateManager.getInstance().addUnresponsiveClient(client.getId(),\r\n                    ReasonEnum.NOSTAT);\r\n        }\r\n    }\r\n\r\n    public <S extends Enum<S>, A extends Enum<A> & MessageEnums.ActionToStatus<S>> void handleStatMessage (AbstractClient<S, A> client, ReceiveMessage receiveMessage) {\r\n\r\n        A lastAction = client.getLastActionSent();\r\n        S expectedStatus = null;\r\n        MessageEnums.CCPStatus alternateStatus = null;\r\n        boolean altPath = false;\r\n\r\n        if (lastAction != null) {\r\n            expectedStatus = lastAction.getStatus();\r\n\r\n            if (receiveMessage.clientType.equals(\"CCP\")) {\r\n                if (lastAction.equals(MessageEnums.CCPAction.FSLOWC)\r\n                        || lastAction.equals(MessageEnums.CCPAction.RSLOWC)) {\r\n                    alternateStatus = MessageEnums.CCPStatus.STOPC;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        try {\r\n            S recievedStatus =\r\n                    Enum.valueOf(client.getStatus().getDeclaringClass(), receiveMessage.status);\r\n\r\n            if (!client.isExpectingStat()) {\r\n                client.sendAcknowledgeMessage(MessageEnums.AKType.AKST);\r\n            }\r\n\r\n            // If client reports ERR\r\n            if (recievedStatus.toString().equals(\"ERR\")) {\r\n                systemStateManager.addUnresponsiveClient(client.getId(), ReasonEnum.CLIENTERR);\r\n                altPath = true;\r\n            }\r\n\r\n            // For specifically FSLOWC and RSLOWC case\r\n            if (alternateStatus != null && recievedStatus.equals(alternateStatus)\r\n                    && systemStateManager.getState().equals(SystemState.RUNNING)) {\r\n                // Ashton should get his STOPC\r\n                Processor.bladeRunnerStopped(receiveMessage.clientID);\r\n                altPath = true;\r\n            }\r\n\r\n            String clientLastExec = client.getLastActionSent().toString();\r\n\r\n            // For DOOR stat response when no response needed\r\n            if (!altPath\r\n                    && (receiveMessage.status.equals(\"ONOPEN\") && clientLastExec.equals(\"OPEN\"))\r\n                    && (receiveMessage.status.equals(\"ON\") && clientLastExec.equals(\"CLOSE\"))) {\r\n                altPath = true;\r\n            }\r\n\r\n            if (!altPath && expectedStatus != null && !expectedStatus.equals(recievedStatus)) {\r\n                // If client is not in expected state then there is a problem\r\n                systemStateManager.addUnresponsiveClient(client.getId(), ReasonEnum.WRONGSTATUS);\r\n                logger.log(Level.SEVERE, \"Client {0} did not update status to {1} from {2}\",\r\n                        new Object[] {client.getId(), expectedStatus, receiveMessage.status});\r\n            }\r\n\r\n            // If the current stat message sequence number is the highest then the stats\r\n            // missed should = 0\r\n            if (client.getLatestStatusMessageCount() < receiveMessage.sequenceNumber) {\r\n                client.updateLatestStatusMessageCount(receiveMessage.sequenceNumber);\r\n                client.resetMissedStats();\r\n            }\r\n\r\n            client.noLongerExpectingStat();\r\n            client.updateStatus(recievedStatus);\r\n        } catch (IllegalArgumentException e) {\r\n            // Handle case where the status in receiveMessage is invalid\r\n            logger.log(Level.SEVERE, \"Invalid status: received {0} for client {1}\",\r\n                    new Object[] {receiveMessage.status, client.getId()});\r\n        }\r\n\r\n        logger.log(Level.INFO, \"Received STAT message from Client: {0}\", receiveMessage.clientID);\r\n    }\r\n\r\n    public void shutdown() {\r\n        scheduler.shutdown();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/messages/StatHandler.java b/src/main/java/org/example/messages/StatHandler.java
--- a/src/main/java/org/example/messages/StatHandler.java	(revision 73905684fd94ecd12a8bbb7db62d0d827bafc9a5)
+++ b/src/main/java/org/example/messages/StatHandler.java	(date 1728829115068)
@@ -61,12 +61,11 @@
         if (lastAction != null) {
             expectedStatus = lastAction.getStatus();
 
-            if (receiveMessage.clientType.equals("CCP")) {
-                if (lastAction.equals(MessageEnums.CCPAction.FSLOWC)
-                        || lastAction.equals(MessageEnums.CCPAction.RSLOWC)) {
+            if (receiveMessage.clientType.equals("CCP") && (lastAction.equals(MessageEnums.CCPAction.FSLOWC)
+                        || lastAction.equals(MessageEnums.CCPAction.RSLOWC))) {
                     alternateStatus = MessageEnums.CCPStatus.STOPC;
-                }
             }
+
         }
 
 
Index: src/main/java/org/example/client/BladeRunnerClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.client;\r\n\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\n\r\nimport org.example.messages.MessageEnums;\r\nimport org.example.messages.MessageEnums.CCPAction;\r\nimport org.example.messages.MessageSender;\r\n\r\npublic class BladeRunnerClient extends AbstractClient<MessageEnums.CCPStatus, CCPAction> {\r\n    private final AtomicInteger zone = new AtomicInteger();\r\n    private volatile boolean isCurrentlyMapped;\r\n    private volatile boolean collision;\r\n    private volatile boolean dockedAtStation;\r\n\r\n\r\n    public BladeRunnerClient (String id, MessageGenerator messageGenerator,\r\n                              MessageSender messageSender, int initialSequenceNumber) {\r\n        super(id, messageGenerator, messageSender, initialSequenceNumber);\r\n        this.updateStatus(MessageEnums.CCPStatus.STOPC);\r\n        this.type = \"BR\";\r\n        this.isCurrentlyMapped = false;\r\n        this.dockedAtStation = false;\r\n    }\r\n\r\n    public Integer getZone() {\r\n        return zone.get();\r\n    }\r\n\r\n    public void changeZone(int zone) {\r\n        this.zone.set(zone);\r\n        isCurrentlyMapped = true;\r\n    }\r\n\r\n    public boolean isUnmapped() {\r\n        return !isCurrentlyMapped;\r\n    }\r\n\r\n    public boolean collision(boolean hasCollide, Object o) {\r\n        if (o != null) {\r\n            collision = hasCollide;\r\n        }\r\n        return collision;\r\n    }\r\n\r\n    public boolean isDockedAtStation() {\r\n        return dockedAtStation;\r\n    }\r\n\r\n    public void setDockedAtStation(Boolean b) {\r\n        dockedAtStation = b;\r\n    }\r\n\r\n    @Override\r\n    public void sendExecuteMessage(CCPAction action) {\r\n        this.lastActionSent = action;\r\n        String message = messageGenerator.generateExecuteMessage(type, super.getId(),\r\n                outgoingSequenceNumber.getAndIncrement(), action.toString());\r\n        sendMessage(message, \"EXEC\");\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/client/BladeRunnerClient.java b/src/main/java/org/example/client/BladeRunnerClient.java
--- a/src/main/java/org/example/client/BladeRunnerClient.java	(revision 73905684fd94ecd12a8bbb7db62d0d827bafc9a5)
+++ b/src/main/java/org/example/client/BladeRunnerClient.java	(date 1728827877968)
@@ -4,7 +4,6 @@
 
 import org.example.messages.MessageEnums;
 import org.example.messages.MessageEnums.CCPAction;
-import org.example.messages.MessageSender;
 
 public class BladeRunnerClient extends AbstractClient<MessageEnums.CCPStatus, CCPAction> {
     private final AtomicInteger zone = new AtomicInteger();
Index: src/main/java/org/example/messages/MessageSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/messages/MessageSender.java b/src/main/java/org/example/client/MessageSender.java
rename from src/main/java/org/example/messages/MessageSender.java
rename to src/main/java/org/example/client/MessageSender.java
--- a/src/main/java/org/example/messages/MessageSender.java	(revision 73905684fd94ecd12a8bbb7db62d0d827bafc9a5)
+++ b/src/main/java/org/example/client/MessageSender.java	(date 1728827877988)
@@ -1,4 +1,6 @@
-package org.example.messages;
+package org.example.client;
+
+import org.example.messages.Server;
 
 import java.net.InetAddress;
 
Index: src/main/java/org/example/client/CheckpointClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.client;\r\n\r\nimport org.example.messages.MessageEnums;\r\nimport org.example.messages.MessageEnums.CPCAction;\r\nimport org.example.messages.MessageSender;\r\n\r\npublic class CheckpointClient extends AbstractClient<MessageEnums.CPCStatus, CPCAction> {\r\n    private final int location;\r\n\r\n    public CheckpointClient (String id, MessageGenerator messageGenerator,\r\n                             MessageSender messageSender, int initialSequenceNumber, int location) {\r\n        super(id, messageGenerator, messageSender, initialSequenceNumber);\r\n        this.updateStatus(MessageEnums.CPCStatus.OFF);\r\n        this.location = location;\r\n        this.type = \"CPC\";\r\n    }\r\n\r\n    public int getLocation() {\r\n        return location;\r\n    }\r\n\r\n    @Override\r\n    public void sendExecuteMessage(CPCAction action) {\r\n        if (!action.equals(MessageEnums.CPCAction.BLINK)) {\r\n            this.lastActionSent = action;\r\n        }\r\n\r\n        lastExecMessageSent = action.toString();\r\n        String message = messageGenerator.generateExecuteMessage(type, super.getId(),\r\n                outgoingSequenceNumber.getAndIncrement(), String.valueOf(action));\r\n\r\n        sendMessage(message, \"EXEC\");\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/client/CheckpointClient.java b/src/main/java/org/example/client/CheckpointClient.java
--- a/src/main/java/org/example/client/CheckpointClient.java	(revision 73905684fd94ecd12a8bbb7db62d0d827bafc9a5)
+++ b/src/main/java/org/example/client/CheckpointClient.java	(date 1728827877981)
@@ -2,7 +2,6 @@
 
 import org.example.messages.MessageEnums;
 import org.example.messages.MessageEnums.CPCAction;
-import org.example.messages.MessageSender;
 
 public class CheckpointClient extends AbstractClient<MessageEnums.CPCStatus, CPCAction> {
     private final int location;
Index: src/main/java/org/example/client/StationClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.client;\r\nimport org.example.messages.MessageEnums;\r\nimport org.example.messages.MessageEnums.STCAction;\r\nimport org.example.messages.MessageSender;\r\n\r\npublic class StationClient extends AbstractClient<MessageEnums.STCStatus, STCAction> {\r\n    private final int location;\r\n\r\n    public StationClient (String id, MessageGenerator messageGenerator, MessageSender messageSender,\r\n                          int initialSequenceNumber, int location) {\r\n        super(id, messageGenerator, messageSender, initialSequenceNumber);\r\n        // Everyone starts like this but maybe they dont is the thing\r\n        this.updateStatus(MessageEnums.STCStatus.OFF);\r\n        this.location = location;\r\n        this.type = \"STC\";\r\n    }\r\n\r\n    public int getLocation() {\r\n        return location;\r\n    }\r\n\r\n    @Override\r\n    public void sendExecuteMessage(STCAction action) {\r\n        if (!action.equals(MessageEnums.STCAction.BLINK)) {\r\n            this.lastActionSent = action;\r\n        }\r\n        lastExecMessageSent = action.toString();\r\n        String message = messageGenerator.generateExecuteMessage(type, super.getId(),\r\n                outgoingSequenceNumber.getAndIncrement(), String.valueOf(action));\r\n        sendMessage(message, \"EXEC\");\r\n    }\r\n\r\n    public void sendDoorMessage (STCAction action) {\r\n        this.lastActionSent = action;\r\n        String message = messageGenerator.generateDoorMessage(type, super.getId(),\r\n                outgoingSequenceNumber.getAndIncrement(), String.valueOf(action));\r\n        sendMessage(message, \"DOOR\");\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/client/StationClient.java b/src/main/java/org/example/client/StationClient.java
--- a/src/main/java/org/example/client/StationClient.java	(revision 73905684fd94ecd12a8bbb7db62d0d827bafc9a5)
+++ b/src/main/java/org/example/client/StationClient.java	(date 1728827877998)
@@ -1,7 +1,6 @@
 package org.example.client;
 import org.example.messages.MessageEnums;
 import org.example.messages.MessageEnums.STCAction;
-import org.example.messages.MessageSender;
 
 public class StationClient extends AbstractClient<MessageEnums.STCStatus, STCAction> {
     private final int location;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"1d9b5952-4092-4fc7-8340-7dd220ada861\" name=\"Changes\" comment=\"Added tests\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/client/BladeRunnerClient.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/client/BladeRunnerClient.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/client/StationClient.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/client/StationClient.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Vchandrapati&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Vchandrapati/ENG3000MCP&quot;,\r\n    &quot;accountId&quot;: &quot;4e31187b-23c8-41a7-9e96-7c9dccea6ccc&quot;\r\n  }\r\n}</component>\r\n  <component name=\"KubernetesApiProvider\">{\r\n  &quot;isMigrated&quot;: true\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"ProjectErrors\" />\r\n  </component>\r\n  <component name=\"ProjectCodeStyleSettingsMigration\">\r\n    <option name=\"version\" value=\"2\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2mFBoeq8SVwYaBy3dnmQEg4k3Ej\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.Unnamed.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"SONARLINT_PRECOMMIT_ANALYSIS\": \"true\",\r\n    \"git-widget-placeholder\": \"experimental\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.0\",\r\n    \"project.structure.side.proportion\": \"0.0\",\r\n    \"run.code.analysis.last.selected.profile\": \"pProject Default\",\r\n    \"settings.editor.selected.configurable\": \"preferences.sourceCode\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Programming\\Java\\ENG3000MCP\\src\\main\\java\\org\\example\\messages\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Unnamed\" type=\"Application\" factoryName=\"Application\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.example.App\" />\r\n      <module name=\"ENG3000MCP2.0\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9f38398b9061-39b83d9b5494-intellij.indexing.shared.core-IU-241.18034.62\" />\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-IU-241.18034.62\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"1d9b5952-4092-4fc7-8340-7dd220ada861\" name=\"Changes\" comment=\"\" />\r\n      <created>1726662619710</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1726662619710</updated>\r\n      <workItem from=\"1726662620775\" duration=\"12389000\" />\r\n      <workItem from=\"1726714384225\" duration=\"3166000\" />\r\n      <workItem from=\"1726752285766\" duration=\"7356000\" />\r\n      <workItem from=\"1727093956805\" duration=\"221000\" />\r\n      <workItem from=\"1727094523589\" duration=\"4485000\" />\r\n      <workItem from=\"1727151100753\" duration=\"5434000\" />\r\n      <workItem from=\"1727174658497\" duration=\"15000\" />\r\n      <workItem from=\"1727190317781\" duration=\"938000\" />\r\n      <workItem from=\"1727334859992\" duration=\"4665000\" />\r\n      <workItem from=\"1727353281317\" duration=\"2659000\" />\r\n      <workItem from=\"1727423267711\" duration=\"1774000\" />\r\n      <workItem from=\"1727610779503\" duration=\"107000\" />\r\n      <workItem from=\"1727756919956\" duration=\"5487000\" />\r\n      <workItem from=\"1727784351705\" duration=\"3450000\" />\r\n      <workItem from=\"1728203512376\" duration=\"15480000\" />\r\n      <workItem from=\"1728346527791\" duration=\"4334000\" />\r\n      <workItem from=\"1728358965380\" duration=\"13378000\" />\r\n      <workItem from=\"1728454873014\" duration=\"4358000\" />\r\n      <workItem from=\"1728459319167\" duration=\"2407000\" />\r\n      <workItem from=\"1728518327776\" duration=\"10121000\" />\r\n      <workItem from=\"1728528588832\" duration=\"2275000\" />\r\n      <workItem from=\"1728631997087\" duration=\"1413000\" />\r\n      <workItem from=\"1728702329898\" duration=\"652000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726665832685</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726665832685</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726668962356</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726668962356</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726670335389</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726670335389</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726670342536</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726670342536</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726670346212</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726670346212</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Made some changes to comply with sonarlint and rerouted messages in emergency state\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726671239958</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726671239958</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Made some changes to comply with sonarlint and rerouted messages in emergency state\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726714422632</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726714422632</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Updated some server logic and fixed message handler location\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726755404711</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726755404711</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Updated some server logic and fixed message handler location\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726755423120</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726755423120</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Updated visualiser to use different table for showing trains\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726757017143</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726757017143</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Updated visualiser to use different table for showing trains\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726757060265</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726757060265</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Updated visualiser to be more cohesive and added timer and did some sonarlint fixes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727153970881</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727153970881</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Renamed everything to blade runner and cleaned up code\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727340096208</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727340096208</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Refactored Database\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727353741185</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727353741185</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Fixed optional bug\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727423504889</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727423504889</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Fixed optional bug\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727424352865</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727424352865</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Refactored some processor code\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727770188427</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727770188427</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Added cool new panel\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727792285045</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727792285045</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Updated message handler to verify execs\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728359031782</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728359031782</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Fixed fuck up\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728360882451</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728360882451</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Changed stat message to change client status\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728367233839</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728367233839</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"refactored processor and fixed up some bugs\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728391832555</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728391832555</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728528001550</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728528001550</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728528043100</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728528043100</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728528792220</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728528792220</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728528804324</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728528804324</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728529120402</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728529120402</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Added tests\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728702691671</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728702691671</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"29\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Made some changes to comply with sonarlint\" />\r\n    <MESSAGE value=\"Made some changes to comply with sonarlint and rerouted messages in emergency state\" />\r\n    <MESSAGE value=\"Updated some server logic and fixed message handler location\" />\r\n    <MESSAGE value=\"Updated visualiser to use different table for showing trains\" />\r\n    <MESSAGE value=\"Updated visualiser to be more cohesive and added timer and did some sonarlint fixes\" />\r\n    <MESSAGE value=\"Reformatted code to be cleaner\" />\r\n    <MESSAGE value=\"Renamed everything to blade runner and cleaned up code\" />\r\n    <MESSAGE value=\"Refactored Database\" />\r\n    <MESSAGE value=\"Fixed optional bug\" />\r\n    <MESSAGE value=\"Refactored some processor code\" />\r\n    <MESSAGE value=\"Added cool new panel\" />\r\n    <MESSAGE value=\"Updated message handler to verify execs\" />\r\n    <MESSAGE value=\"Fixed fuck up\" />\r\n    <MESSAGE value=\"Changed stat message to change client status\" />\r\n    <MESSAGE value=\"refactored processor and fixed up some bugs\" />\r\n    <MESSAGE value=\"Moved subsystems into packages and seperated client\" />\r\n    <MESSAGE value=\"Added tests\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Added tests\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 73905684fd94ecd12a8bbb7db62d0d827bafc9a5)
+++ b/.idea/workspace.xml	(date 1728837441382)
@@ -6,8 +6,14 @@
   <component name="ChangeListManager">
     <list default="true" id="1d9b5952-4092-4fc7-8340-7dd220ada861" name="Changes" comment="Added tests">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/App.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/App.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Processor.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Processor.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/client/BladeRunnerClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/client/BladeRunnerClient.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/client/CheckpointClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/client/CheckpointClient.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/client/StationClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/client/StationClient.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/messages/MessageHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/messages/MessageHandler.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/messages/MessageSender.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/client/MessageSender.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/messages/StatHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/messages/StatHandler.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -59,28 +65,28 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Application.Unnamed.executor": "Run",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "SONARLINT_PRECOMMIT_ANALYSIS": "true",
-    "git-widget-placeholder": "experimental",
-    "kotlin-language-version-configured": "true",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "project.structure.last.edited": "Modules",
-    "project.structure.proportion": "0.0",
-    "project.structure.side.proportion": "0.0",
-    "run.code.analysis.last.selected.profile": "pProject Default",
-    "settings.editor.selected.configurable": "preferences.sourceCode",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Application.Unnamed.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;SONARLINT_PRECOMMIT_ANALYSIS&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;experimental&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
+    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.sourceCode&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
       <recent name="D:\Programming\Java\ENG3000MCP\src\main\java\org\example\messages" />
@@ -134,6 +140,7 @@
       <workItem from="1728528588832" duration="2275000" />
       <workItem from="1728631997087" duration="1413000" />
       <workItem from="1728702329898" duration="652000" />
+      <workItem from="1728824943482" duration="8186000" />
     </task>
     <task id="LOCAL-00001" summary="Made some changes to comply with sonarlint">
       <option name="closed" value="true" />
