Index: src/main/java/org/example/Server.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n\r\nimport java.io.IOException;\r\nimport java.net.*;\r\nimport java.util.List;\r\nimport java.util.concurrent.*;\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport java.nio.charset.*;\r\n\r\n/**\r\n * Manages network communication with clients over UDP.\r\n * It handles incoming packets, maintains a list of connected clients,\r\n * and schedules status checks.\r\n *\r\n * <p>\r\n * Utilises the Singleton pattern to ensure only one instance of the Server\r\n * exists.\r\n */\r\npublic class Server implements Runnable {\r\n    public static final int PORT = 6666;\r\n    private static final Database db = Database.getInstance();\r\n    private static final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\r\n    private DatagramSocket serverSocket;\r\n    private final AtomicBoolean serverRunning;\r\n    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n    private final ExecutorService executorService = Executors.newFixedThreadPool(2);\r\n    private static final int TIMEOUT = 5000;\r\n    private static final int BUFFER_SIZE = 1024;\r\n    private static final int STAT_INTERVAL_SECONDS = 5000;\r\n    private static final BlockingQueue<DatagramPacket> mailbox = new LinkedBlockingQueue<>();\r\n    private final MessageHandler messageHandler = new MessageHandler();\r\n\r\n    private Server() {\r\n        serverRunning = new AtomicBoolean(true);\r\n        try {\r\n            serverSocket = new DatagramSocket(PORT);\r\n            logger.info(\"Server completed startup and listening on PORT: \" + PORT);\r\n        } catch (Exception e) {\r\n            logger.log(Level.SEVERE, \"Error starting up server\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Holder class for implementing the Singleton pattern.\r\n     */\r\n    private static class Holder {\r\n        private static final Server INSTANCE = new Server();\r\n\r\n        static {\r\n            Thread serverThread = new Thread(INSTANCE, \"Server-Thread\");\r\n            serverThread.start();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        startConnectionListener();\r\n        startStatusScheduler();\r\n    }\r\n\r\n    /**\r\n     * Returns the singleton instance of the Server.\r\n     *\r\n     * @return the singleton Server instance\r\n     */\r\n    public static Server getInstance() {\r\n        return Holder.INSTANCE;\r\n    }\r\n\r\n    private void startConnectionListener() {\r\n        executorService.execute(this::connectionListener);\r\n        executorService.execute(this::packetProcessor);\r\n    }\r\n\r\n    /**\r\n     * Listens for incoming UDP packets and processes them.\r\n     * If a client is recognized, processes the packet with the existing client.\r\n     * Otherwise, creates a new client instance and registers it.\r\n     */\r\n    private void connectionListener() {\r\n        while (serverRunning.get()) {\r\n            try {\r\n                DatagramPacket receivePacket = new DatagramPacket(new byte[BUFFER_SIZE], BUFFER_SIZE);\r\n                serverSocket.receive(receivePacket);\r\n                if (receivePacket.getLength() > 0)\r\n                    mailbox.add(receivePacket);\r\n            } catch (IOException e) {\r\n                logger.log(Level.SEVERE, \"Error receiving packet {0}\", e.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    private void packetProcessor() {\r\n        while (serverRunning.get()) {\r\n            try {\r\n                DatagramPacket receivePacket = mailbox.take();\r\n                String message = new String(receivePacket.getData(), 0, receivePacket.getLength(), StandardCharsets.UTF_8);\r\n                messageHandler.handleMessage(message, receivePacket.getAddress(), receivePacket.getPort());\r\n            } catch (InterruptedException e) {\r\n                logger.log(Level.SEVERE, \"Packet processor was interrupted\", e);\r\n                Thread.currentThread().interrupt();\r\n            } catch (Exception e) {\r\n                logger.log(Level.SEVERE, \"Error processing packet\", e);\r\n            }\r\n        }\r\n\r\n        logger.log(Level.INFO, \"Packet processor terminated\");\r\n    }\r\n\r\n    public void startStatusScheduler() {\r\n        scheduler.scheduleAtFixedRate(() -> {\r\n            long sendTime = System.currentTimeMillis();\r\n\r\n            List<Client> clients = db.getClients();\r\n            for (Client client : clients) {\r\n                if (client.isRegistered()) {\r\n                    client.setStatReturned(false);\r\n                    client.sendStatusMessage(client.id, System.currentTimeMillis());\r\n                }\r\n            }\r\n\r\n            try {\r\n                Thread.sleep(TIMEOUT);\r\n                checkForMissingResponse(clients, sendTime);\r\n            } catch (InterruptedException e) {\r\n                logger.log(Level.INFO, \"Error waiting for stat\");\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        }, 0, STAT_INTERVAL_SECONDS, TimeUnit.MILLISECONDS);\r\n    }\r\n\r\n    /**\r\n     * Checks for clients that have not responded to a status request sent within a\r\n     * timeframe.\r\n     * If a client has not responded, logs an error and updates the system state to\r\n     * EMERGENCY.\r\n     * For unresponsive train clients, adds them to the unresponsive client list in\r\n     * the database.\r\n     *\r\n     * @param clients the list of clients to check\r\n     */\r\n    private void checkForMissingResponse(List<Client> clients, Long sendTime) {\r\n        for (Client client : clients) {\r\n            boolean hasFailed = false;\r\n            if (!client.lastStatReturned() && client.isRegistered() && client.lastStatMSGSent()) {\r\n                logger.severe(String.format(\"No STAT response from %s sent at %d\", client.getId(), sendTime));\r\n                hasFailed = true;\r\n\r\n                // if a train is unresponsive\r\n                if (client.isTrainClient())\r\n                    db.addUnresponsiveClient(client.getId());\r\n            }\r\n            if (hasFailed)\r\n                SystemStateManager.getInstance().setState(SystemState.EMERGENCY);\r\n        }\r\n    }\r\n\r\n    public void sendMessageToClient(Client client, String message, String type) {\r\n        try {\r\n            byte[] buffer = message.getBytes();\r\n            DatagramPacket sendPacket = new DatagramPacket(buffer, buffer.length, client.getClientAddress(),\r\n                    client.getClientPort());\r\n            serverSocket.send(sendPacket);\r\n            logger.log(Level.INFO, String.format(\"Sent %s to client: %s\", type, client.id));\r\n        } catch (IOException e) {\r\n            logger.log(Level.SEVERE, \"Failed to send message to client \" + client.getId(), e);\r\n        }\r\n    }\r\n\r\n    // Closes the active threads safely\r\n    public void shutdown() {\r\n        try {\r\n            if (serverSocket != null) {\r\n                serverRunning.set(false);\r\n                serverSocket.close();\r\n                scheduler.shutdownNow();\r\n                executorService.shutdownNow();\r\n\r\n                logger.log(Level.INFO, \"Server shutdown complete\");\r\n            }\r\n        } catch (Exception e) {\r\n            logger.log(Level.SEVERE, \"Error shutting down server\", e);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/Server.java b/src/main/java/org/example/Server.java
--- a/src/main/java/org/example/Server.java	(revision 7d915b89540206586fa8bddfab199444799f7a9d)
+++ b/src/main/java/org/example/Server.java	(date 1726669103727)
@@ -19,13 +19,13 @@
  * exists.
  */
 public class Server implements Runnable {
-    public static final int PORT = 6666;
     private static final Database db = Database.getInstance();
     private static final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
     private DatagramSocket serverSocket;
     private final AtomicBoolean serverRunning;
     private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
     private final ExecutorService executorService = Executors.newFixedThreadPool(2);
+    public static final int PORT = 6666;
     private static final int TIMEOUT = 5000;
     private static final int BUFFER_SIZE = 1024;
     private static final int STAT_INTERVAL_SECONDS = 5000;
Index: src/main/java/org/example/Database.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n\r\nimport java.util.*;\r\nimport java.util.concurrent.ConcurrentHashMap;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport java.net.InetAddress;\r\n\r\npublic class Database {\r\n    private static final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\r\n    private final ConcurrentHashMap<String, Client> clients;\r\n    private final ConcurrentHashMap<String, Integer> trainBlockMap;\r\n\r\n    // Hashmap of key: IP + Port value: client ID\r\n    private final ConcurrentHashMap<String, String> clientKeys;\r\n\r\n    // Set of all train client IDs\r\n    private final HashSet<String> allTrains;\r\n    // Set of all unresponsive or \"dead\" clients\r\n    private final HashSet<String> unresponsiveClients;\r\n    // Set of all train clients waiting to reconnect\r\n    private final HashSet<String> waitingToReconnectTrains;\r\n    private final AtomicInteger numberOfCheckpoints;\r\n\r\n    private Database() {\r\n        clients = new ConcurrentHashMap<>();\r\n        trainBlockMap = new ConcurrentHashMap<>();\r\n\r\n        clientKeys = new ConcurrentHashMap<>();\r\n\r\n        allTrains = new HashSet<>();\r\n        unresponsiveClients = new HashSet<>();\r\n        waitingToReconnectTrains = new HashSet<>();\r\n\r\n        numberOfCheckpoints = new AtomicInteger(0);\r\n    }\r\n\r\n    /**\r\n     * Holder class for implementing the Singleton pattern.\r\n     */\r\n    private static class Holder {\r\n        private static final Database INSTANCE = new Database();\r\n    }\r\n\r\n    /**\r\n     * Returns the singleton instance of the Server.\r\n     *\r\n     * @return the singleton Server instance\r\n     */\r\n    public static Database getInstance() {\r\n        return Holder.INSTANCE;\r\n    }\r\n\r\n    public void addUnresponsiveClient(String id) {\r\n        unresponsiveClients.add(id);\r\n    }\r\n\r\n    // Method to return all clients which are unresponsive or \"dead\"\r\n    public List<Client> getUnresponsiveClients() {\r\n        List<Client> deadClients = new ArrayList<>();\r\n        for (String id : unresponsiveClients) {\r\n            Client client = clients.get(id);\r\n            if (client != null) {\r\n                deadClients.add(client);\r\n            }\r\n        }\r\n\r\n        return deadClients;\r\n    }\r\n\r\n    public List<TrainClient> getTrainsWaitingToReconnect() {\r\n        List<TrainClient> waitingClients = new ArrayList<>();\r\n        for (String id : unresponsiveClients) {\r\n            Client client = clients.get(id);\r\n\r\n            if (client != null && clients.get(id) instanceof TrainClient) {\r\n                waitingClients.add((TrainClient) client);\r\n            } else {\r\n                logger.log(Level.SEVERE, \"A non train in waitingToReconnectTrains set: {0}\", id);\r\n            }\r\n        }\r\n\r\n        return waitingClients;\r\n    }\r\n\r\n    public Map<String, Integer> getTrainBlockMap() {\r\n        return new HashMap<>(trainBlockMap);\r\n    }\r\n\r\n    public void clearUnresponsiveClients() {\r\n        unresponsiveClients.clear();\r\n    }\r\n\r\n    // Add any client with this method\r\n    public void addClient(String id, Client client, InetAddress clientAddress, String clientPort) {\r\n        // Will attempt to add a client\r\n        // If absent it will happen, however, if it is present the previous client will\r\n        // be handed over\r\n        Client prevValue = clients.putIfAbsent(id, client);\r\n        clients.putIfAbsent(id, client);\r\n\r\n        // If there was a previous cient log the error\r\n        if (prevValue != null) {\r\n            String message = \"Attempted to add duplicate client with id: \" + id;\r\n            logger.log(Level.WARNING, message);\r\n            throw new IllegalArgumentException(message);\r\n        }\r\n\r\n        // If there was no previous client then add the client to the correct lists\r\n        if (id.startsWith(\"BR\")) {\r\n            allTrains.add(id);\r\n        }\r\n\r\n        if (id.startsWith(\"CP\")) {\r\n            numberOfCheckpoints.getAndIncrement();\r\n        }\r\n\r\n        clientKeys.put(clientAddress + clientPort, id);\r\n    }\r\n\r\n    // Get any client with this method\r\n    public Client getClient(String id) {\r\n        return clients.get(id);\r\n    }\r\n\r\n    // For Vikil\r\n    public Client getClient(InetAddress clientAddress, String clientPort) {\r\n        if (clientAddress == null || clientPort == null) {\r\n            return null;\r\n        }\r\n        String key = clientKeys.get(clientAddress + clientPort);\r\n\r\n        if (key == null) {\r\n            return null;\r\n        }\r\n        return clients.get(key);\r\n    }\r\n\r\n    public void addClientToUnresponsive(String id) {\r\n        unresponsiveClients.add(id);\r\n    }\r\n\r\n    public void removeClientFromUnresponsive(String id) {\r\n        unresponsiveClients.remove(id);\r\n    }\r\n\r\n    public boolean isClientUnresponsive(String id) {\r\n        return unresponsiveClients.contains(id);\r\n    }\r\n\r\n    public boolean isUnresponsiveEmpty() {\r\n        return unresponsiveClients.isEmpty();\r\n    }\r\n\r\n    public void addClientToReconnecting(String id) {\r\n        if (!id.startsWith(\"BR\")) {\r\n            logger.log(Level.WARNING, \"Attempted to add a non-train to waiting to reconnect: {0}\", id);\r\n        }\r\n        waitingToReconnectTrains.add(id);\r\n    }\r\n\r\n    public void removeClientFromReconnecting(String id) {\r\n        if (!id.startsWith(\"BR\")) {\r\n            logger.log(Level.WARNING, \"Attempted to remove a non-train to waiting to reconnect: {0}\", id);\r\n        }\r\n        waitingToReconnectTrains.remove(id);\r\n    }\r\n\r\n    public void updateTrainBlock(String trainId, int newBlock) {\r\n        trainBlockMap.put(trainId, newBlock);\r\n    }\r\n\r\n    public boolean isBlockOccupied(int blockId) {\r\n        return trainBlockMap.containsValue(blockId);\r\n    }\r\n\r\n    public String getLastTrainInBlock(int blockId) {\r\n        return trainBlockMap.entrySet()\r\n                .stream()\r\n                .filter(entry -> entry.getValue().equals(blockId))\r\n                .map(Map.Entry::getKey)\r\n                .reduce((first, second) -> second)\r\n                .orElse(null);\r\n    }\r\n\r\n    public List<TrainClient> getTrainClients() {\r\n        List<TrainClient> trains = new ArrayList<>();\r\n        for (String id : allTrains) {\r\n            if (clients.get(id) instanceof TrainClient) {\r\n                trains.add((TrainClient) clients.get(id));\r\n            } else {\r\n                logger.log(Level.SEVERE, \"A non train in allTrains set: {0}\", id);\r\n            }\r\n        }\r\n\r\n        return trains;\r\n    }\r\n\r\n    public List<Client> getClients() {\r\n        return new ArrayList<>(clients.values());\r\n    }\r\n\r\n    public int getTrainCount() {\r\n        return allTrains.size();\r\n    }\r\n\r\n    public Integer getCheckpointCount() {\r\n        return numberOfCheckpoints.get();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/Database.java b/src/main/java/org/example/Database.java
--- a/src/main/java/org/example/Database.java	(revision 7d915b89540206586fa8bddfab199444799f7a9d)
+++ b/src/main/java/org/example/Database.java	(date 1726669083641)
@@ -100,7 +100,7 @@
         Client prevValue = clients.putIfAbsent(id, client);
         clients.putIfAbsent(id, client);
 
-        // If there was a previous cient log the error
+        // If there was a previous client log the error
         if (prevValue != null) {
             String message = "Attempted to add duplicate client with id: " + id;
             logger.log(Level.WARNING, message);
@@ -124,7 +124,6 @@
         return clients.get(id);
     }
 
-    // For Vikil
     public Client getClient(InetAddress clientAddress, String clientPort) {
         if (clientAddress == null || clientPort == null) {
             return null;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"1d9b5952-4092-4fc7-8340-7dd220ada861\" name=\"Changes\" comment=\"Made some changes to comply with sonarlint\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/1/1/111654fe445d55379ae3a0d80d5edea5a42b9468\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/1/1/111654fe445d55379ae3a0d80d5edea5a42b9468\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/2/6/268b09d2a5cdab7d148f0ec91f7b3fb51601410d\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/2/6/268b09d2a5cdab7d148f0ec91f7b3fb51601410d\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/3/3/33df6e49c0049b5344e9fbe1452523adc50b1ae5\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/3/3/33df6e49c0049b5344e9fbe1452523adc50b1ae5\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/4/5/450cf9bead5a07b20d141721ea7909385b5bb3ee\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/4/5/450cf9bead5a07b20d141721ea7909385b5bb3ee\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/6/d/6d2e3c01f1113886131523a407f0a71558671ec9\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/6/d/6d2e3c01f1113886131523a407f0a71558671ec9\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/9/4/948f489c39dd752773a4b966be32393266256bd7\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/9/4/948f489c39dd752773a4b966be32393266256bd7\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/a/c/ac06820a0b9d2ca9b3064c1609686227fe9aaa98\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/a/c/ac06820a0b9d2ca9b3064c1609686227fe9aaa98\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/c/2/c2c50a5fdeec942080ab12f6948ba1e8dffd03c0\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/c/2/c2c50a5fdeec942080ab12f6948ba1e8dffd03c0\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/d/0/d0e0c9e2f880315fba91b05196bd7998ccd38a80\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/d/0/d0e0c9e2f880315fba91b05196bd7998ccd38a80\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/e/3/e30cbeac6330249122db68224054f827aa95efa6\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/e/3/e30cbeac6330249122db68224054f827aa95efa6\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/f/7/f7dd432092a502c8e35d0c574bc11e935a6987bd\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/f/7/f7dd432092a502c8e35d0c574bc11e935a6987bd\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/index.pb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/index.pb\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/securityhotspotstore/index.pb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/securityhotspotstore/index.pb\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/Constants.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/Database.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/Database.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/MessageGenerator.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/MessageGenerator.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/MessageHandler.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/MessageHandler.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/Processor.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/Processor.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/ScreenLogHandler.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/ScreenLogHandler.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/Server.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/Server.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/SystemStateManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/SystemStateManager.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/VisualiserPanel.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/VisualiserPanel.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/VisualiserScreen.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/VisualiserScreen.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"KubernetesApiProvider\"><![CDATA[{\r\n  \"isMigrated\": true\r\n}]]></component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectCodeStyleSettingsMigration\">\r\n    <option name=\"version\" value=\"2\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\"><![CDATA[{\r\n  \"associatedIndex\": 5\r\n}]]></component>\r\n  <component name=\"ProjectId\" id=\"2mFBoeq8SVwYaBy3dnmQEg4k3Ej\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SONARLINT_PRECOMMIT_ANALYSIS\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"jdk-21.0.2-openjdk-21.0.2-4caba194b151-4f524021\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"1d9b5952-4092-4fc7-8340-7dd220ada861\" name=\"Changes\" comment=\"\" />\r\n      <created>1726662619710</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1726662619710</updated>\r\n      <workItem from=\"1726662620775\" duration=\"5999000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726665832685</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726665832685</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Made some changes to comply with sonarlint\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Made some changes to comply with sonarlint\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7d915b89540206586fa8bddfab199444799f7a9d)
+++ b/.idea/workspace.xml	(date 1726669084019)
@@ -5,29 +5,7 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="1d9b5952-4092-4fc7-8340-7dd220ada861" name="Changes" comment="Made some changes to comply with sonarlint">
-      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/1/1/111654fe445d55379ae3a0d80d5edea5a42b9468" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/1/1/111654fe445d55379ae3a0d80d5edea5a42b9468" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/2/6/268b09d2a5cdab7d148f0ec91f7b3fb51601410d" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/2/6/268b09d2a5cdab7d148f0ec91f7b3fb51601410d" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/3/3/33df6e49c0049b5344e9fbe1452523adc50b1ae5" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/3/3/33df6e49c0049b5344e9fbe1452523adc50b1ae5" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/4/5/450cf9bead5a07b20d141721ea7909385b5bb3ee" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/4/5/450cf9bead5a07b20d141721ea7909385b5bb3ee" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/6/d/6d2e3c01f1113886131523a407f0a71558671ec9" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/6/d/6d2e3c01f1113886131523a407f0a71558671ec9" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/9/4/948f489c39dd752773a4b966be32393266256bd7" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/9/4/948f489c39dd752773a4b966be32393266256bd7" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/a/c/ac06820a0b9d2ca9b3064c1609686227fe9aaa98" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/a/c/ac06820a0b9d2ca9b3064c1609686227fe9aaa98" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/c/2/c2c50a5fdeec942080ab12f6948ba1e8dffd03c0" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/c/2/c2c50a5fdeec942080ab12f6948ba1e8dffd03c0" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/d/0/d0e0c9e2f880315fba91b05196bd7998ccd38a80" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/d/0/d0e0c9e2f880315fba91b05196bd7998ccd38a80" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/e/3/e30cbeac6330249122db68224054f827aa95efa6" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/e/3/e30cbeac6330249122db68224054f827aa95efa6" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/f/7/f7dd432092a502c8e35d0c574bc11e935a6987bd" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/f/7/f7dd432092a502c8e35d0c574bc11e935a6987bd" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/index.pb" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/index.pb" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/securityhotspotstore/index.pb" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/securityhotspotstore/index.pb" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Constants.java" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Database.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Database.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/MessageGenerator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/MessageGenerator.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/MessageHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/MessageHandler.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Processor.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Processor.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/ScreenLogHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/ScreenLogHandler.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Server.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Server.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/SystemStateManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/SystemStateManager.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/VisualiserPanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/VisualiserPanel.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/VisualiserScreen.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/VisualiserScreen.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -84,7 +62,7 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1726662619710</updated>
-      <workItem from="1726662620775" duration="5999000" />
+      <workItem from="1726662620775" duration="6458000" />
     </task>
     <task id="LOCAL-00001" summary="Made some changes to comply with sonarlint">
       <option name="closed" value="true" />
@@ -94,7 +72,15 @@
       <option name="project" value="LOCAL" />
       <updated>1726665832685</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="Made some changes to comply with sonarlint">
+      <option name="closed" value="true" />
+      <created>1726668962356</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1726668962356</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
