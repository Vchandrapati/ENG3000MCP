Index: src/main/java/org/example/messages/StatHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.messages;\r\n\r\nimport org.example.Database;\r\nimport org.example.Processor;\r\nimport org.example.client.AbstractClient;\r\nimport org.example.client.ReasonEnum;\r\nimport org.example.state.SystemState;\r\nimport org.example.state.SystemStateManager;\r\n\r\nimport java.util.List;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\npublic class StatHandler {\r\n    private static final long STAT_INTERVAL_SECONDS = 2000; // Set time later\r\n    private final Object lock = new Object();\r\n    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n    private static final Database db = Database.getInstance();\r\n    private static final SystemStateManager systemStateManager = SystemStateManager.getInstance();\r\n    private static final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\r\n\r\n    public static StatHandler getInstance() {\r\n        return Holder.INSTANCE;\r\n    }\r\n\r\n    private static class Holder {\r\n        private static final StatHandler INSTANCE = new StatHandler();\r\n    }\r\n\r\n    // send stats at specified intervals\r\n    public void startStatusScheduler() {\r\n        scheduler.scheduleAtFixedRate(() -> {\r\n            List<AbstractClient> clients = db.getClients();\r\n            synchronized (lock) {\r\n                for (AbstractClient client : clients) {\r\n                    client.sendStatusMessage();\r\n                    client.nowExpectingStat();\r\n                    checkIfClientIsUnresponsive(client);\r\n                }\r\n            }\r\n        }, 0, STAT_INTERVAL_SECONDS, TimeUnit.MILLISECONDS);\r\n    }\r\n\r\n    private void checkIfClientIsUnresponsive(AbstractClient client) {\r\n        if (client.checkResponsive()) {\r\n            SystemStateManager.getInstance().addUnresponsiveClient(client.getId(),\r\n                    ReasonEnum.NOSTAT);\r\n        }\r\n    }\r\n\r\n    public <S extends Enum<S>, A extends Enum<A> & MessageEnums.ActionToStatus<S>> void handleStatMessage (AbstractClient<S, A> client, ReceiveMessage receiveMessage) {\r\n\r\n        A lastAction = client.getLastActionSent();\r\n        S expectedStatus = null;\r\n        MessageEnums.CCPStatus alternateStatus = null;\r\n        boolean altPath = false;\r\n\r\n        if (lastAction != null) {\r\n            expectedStatus = lastAction.getStatus();\r\n\r\n            if (receiveMessage.clientType.equals(\"CCP\") && (lastAction.equals(MessageEnums.CCPAction.FSLOWC)\r\n                        || lastAction.equals(MessageEnums.CCPAction.RSLOWC))) {\r\n                    alternateStatus = MessageEnums.CCPStatus.STOPC;\r\n                }\r\n\r\n        }\r\n\r\n\r\n        try {\r\n            S recievedStatus =\r\n                    Enum.valueOf(client.getStatus().getDeclaringClass(), receiveMessage.status);\r\n\r\n            if (!client.isExpectingStat()) {\r\n                client.sendAcknowledgeMessage(MessageEnums.AKType.AKST);\r\n            }\r\n\r\n            // If client reports ERR\r\n            if (recievedStatus.toString().equals(\"ERR\")) {\r\n                systemStateManager.addUnresponsiveClient(client.getId(), ReasonEnum.CLIENTERR);\r\n                altPath = true;\r\n            }\r\n\r\n            // For specifically FSLOWC and RSLOWC case\r\n            if (alternateStatus != null && recievedStatus.equals(alternateStatus)\r\n                    && systemStateManager.getState().equals(SystemState.RUNNING)) {\r\n                // Ashton should get his STOPC\r\n                Processor.bladeRunnerStopped(receiveMessage.clientID);\r\n                altPath = true;\r\n            }\r\n\r\n            String clientLastExec = client.getLastActionSent().toString();\r\n\r\n            // For DOOR stat response when no response needed\r\n            if (!altPath\r\n                    && (receiveMessage.status.equals(\"ONOPEN\") && clientLastExec.equals(\"OPEN\"))\r\n                    && (receiveMessage.status.equals(\"ON\") && clientLastExec.equals(\"CLOSE\"))) {\r\n                altPath = true;\r\n            }\r\n\r\n            if (!altPath && expectedStatus != null && !expectedStatus.equals(recievedStatus)) {\r\n                // If client is not in expected state then there is a problem\r\n                systemStateManager.addUnresponsiveClient(client.getId(), ReasonEnum.WRONGSTATUS);\r\n                logger.log(Level.SEVERE, \"Client {0} did not update status to {1} from {2}\",\r\n                        new Object[] {client.getId(), expectedStatus, receiveMessage.status});\r\n            }\r\n\r\n            // If the current stat message sequence number is the highest then the stats\r\n            // missed should = 0\r\n            if (client.getLatestStatusMessageCount() < receiveMessage.sequenceNumber) {\r\n                client.updateLatestStatusMessageCount(receiveMessage.sequenceNumber);\r\n                client.resetMissedStats();\r\n            }\r\n\r\n            client.noLongerExpectingStat();\r\n            client.updateStatus(recievedStatus);\r\n        } catch (IllegalArgumentException e) {\r\n            // Handle case where the status in receiveMessage is invalid\r\n            logger.log(Level.SEVERE, \"Invalid status: received {0} for client {1}\",\r\n                    new Object[] {receiveMessage.status, client.getId()});\r\n        }\r\n\r\n        logger.log(Level.INFO, \"Received STAT message from Client: {0}\", receiveMessage.clientID);\r\n    }\r\n\r\n    public void shutdown() {\r\n        scheduler.shutdown();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/messages/StatHandler.java b/src/main/java/org/example/messages/StatHandler.java
--- a/src/main/java/org/example/messages/StatHandler.java	(revision f30f25ab2e1f329a80104be039f43eaab13a981e)
+++ b/src/main/java/org/example/messages/StatHandler.java	(date 1729005731421)
@@ -15,12 +15,12 @@
 import java.util.logging.Logger;
 
 public class StatHandler {
-    private static final long STAT_INTERVAL_SECONDS = 2000; // Set time later
-    private final Object lock = new Object();
-    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
-    private static final Database db = Database.getInstance();
-    private static final SystemStateManager systemStateManager = SystemStateManager.getInstance();
-    private static final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
+    private final long STAT_INTERVAL_SECONDS = 2000; // Set time later
+    private Object lock = new Object();
+    private ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
+    private Database db = Database.getInstance();
+    private SystemStateManager systemStateManager = SystemStateManager.getInstance();
+    private Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
 
     public static StatHandler getInstance() {
         return Holder.INSTANCE;
Index: src/test/java/MessageHandlerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/MessageHandlerTest.java b/src/test/java/MessageHandlerTest.java
new file mode 100644
--- /dev/null	(date 1729005737736)
+++ b/src/test/java/MessageHandlerTest.java	(date 1729005737736)
@@ -0,0 +1,447 @@
+import org.example.Database;
+import org.example.client.*;
+import org.example.messages.*;
+import org.example.state.SystemStateManager;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import com.fasterxml.jackson.databind.ObjectMapper;
+
+import java.util.Optional;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import java.net.InetAddress;
+
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.ArgumentMatchers.isA;
+import static org.mockito.Mockito.*;
+
+
+
+class MessageHandlerTest {
+
+    @Mock
+    StatHandler sh;
+
+    @Mock
+    Database db;
+
+    @Mock
+    SystemStateManager sm;
+
+    @Mock
+    ClientFactory cf;
+
+    @Mock
+    Logger l;
+
+    @InjectMocks
+    MessageHandler mh;
+
+    private ObjectMapper objectMapper = new ObjectMapper();
+
+    @BeforeEach
+    void beforeEach() {
+        MockitoAnnotations.openMocks(this);
+
+    }
+
+    @Test
+    void test_CCP_STAT_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "BR01";
+        r.clientType = "CCP";
+        r.message = "STAT";
+        r.sequenceNumber = 0;
+
+        BladeRunnerClient br = mock(BladeRunnerClient.class);
+
+        when(db.getClient("BR01", BladeRunnerClient.class)).thenReturn(Optional.of(br));
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(sh, times(1)).handleStatMessage(eq(br), isA(ReceiveMessage.class));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_CCP_AKEX_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "BR01";
+        r.clientType = "CCP";
+        r.message = "AKEX";
+        r.sequenceNumber = 0;
+
+        BladeRunnerClient br = mock(BladeRunnerClient.class);
+
+        when(db.getClient("BR01", BladeRunnerClient.class)).thenReturn(Optional.of(br));
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_CCP_CCIN_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "BR01";
+        r.clientType = "CCP";
+        r.message = "CCIN";
+        r.sequenceNumber = 0;
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(cf, times(1)).handleInitialise(isA(ReceiveMessage.class),
+                eq(InetAddress.getLocalHost()), eq(0));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_unknown_CCP_ERR_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "BR01";
+        r.clientType = "CCP";
+        r.message = "ERR";
+        r.sequenceNumber = 0;
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(l, times(1)).log(eq(Level.SEVERE), isA(String.class), eq("BR01"));
+    }
+
+    @Test
+    void test_known_CCP_ERR_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "BR01";
+        r.clientType = "CCP";
+        r.message = "ERR";
+        r.sequenceNumber = 0;
+
+        BladeRunnerClient br = mock(BladeRunnerClient.class);
+        when(db.getClient("BR01", BladeRunnerClient.class)).thenReturn(Optional.of(br));
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(l, times(1)).log(eq(Level.WARNING), isA(String.class), eq(r.message));
+    }
+
+    @Test
+    void test_CPC_AKEX_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "CP01";
+        r.clientType = "CPC";
+        r.message = "AKEX";
+        r.sequenceNumber = 0;
+
+        BladeRunnerClient br = mock(BladeRunnerClient.class);
+
+        when(db.getClient("CP01", BladeRunnerClient.class)).thenReturn(Optional.of(br));
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_CPC_STAT_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "CP01";
+        r.clientType = "CPC";
+        r.message = "STAT";
+        r.sequenceNumber = 0;
+
+        CheckpointClient cp = mock(CheckpointClient.class);
+
+        when(db.getClient("CP01", CheckpointClient.class)).thenReturn(Optional.of(cp));
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(sh, times(1)).handleStatMessage(eq(cp), isA(ReceiveMessage.class));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_CPC_CPIN_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "CP01";
+        r.clientType = "CPC";
+        r.message = "CPIN";
+        r.sequenceNumber = 0;
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(cf, times(1)).handleInitialise(isA(ReceiveMessage.class),
+                eq(InetAddress.getLocalHost()), eq(0));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_CPC_TRIP_ON_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "CP01";
+        r.clientType = "CPC";
+        r.message = "TRIP";
+        r.sequenceNumber = 0;
+        r.status = "ON";
+
+        CheckpointClient cp = mock(CheckpointClient.class);
+
+        when(db.getClient("CP01", CheckpointClient.class)).thenReturn(Optional.of(cp));
+        when(cp.getLocation()).thenReturn(0);
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(cp).sendAcknowledgeMessage(eq(MessageEnums.AKType.AKTR));
+        verify(cp, times(1)).updateStatus(eq(MessageEnums.CPCStatus.ON));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_CPC_TRIP_OFF_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "CP01";
+        r.clientType = "CPC";
+        r.message = "TRIP";
+        r.sequenceNumber = 0;
+        r.status = "OFF";
+
+        CheckpointClient cp = mock(CheckpointClient.class);
+
+        when(db.getClient("CP01", CheckpointClient.class)).thenReturn(Optional.of(cp));
+        when(cp.getLocation()).thenReturn(0);
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(cp).sendAcknowledgeMessage(eq(MessageEnums.AKType.AKTR));
+        verify(cp, times(1)).updateStatus(eq(MessageEnums.CPCStatus.OFF));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_CPC_TRIP_ERR_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "CP01";
+        r.clientType = "CPC";
+        r.message = "TRIP";
+        r.sequenceNumber = 0;
+        r.status = "ERR";
+
+        CheckpointClient cp = mock(CheckpointClient.class);
+
+        when(db.getClient("CP01", CheckpointClient.class)).thenReturn(Optional.of(cp));
+        when(cp.getId()).thenReturn("CP01");
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(cp).sendAcknowledgeMessage(eq(MessageEnums.AKType.AKTR));
+        verify(sm, times(1)).addUnresponsiveClient(eq("CP01"), eq(ReasonEnum.CLIENTERR));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_unkown_CPC_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "CP01";
+        r.clientType = "CPC";
+        r.message = "???";
+        r.sequenceNumber = 0;
+        r.status = "ERR";
+
+        CheckpointClient cp = mock(CheckpointClient.class);
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(l, times(1)).log(eq(Level.SEVERE), isA(String.class), eq("CP01"));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_kown_CPC_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "CP01";
+        r.clientType = "CPC";
+        r.message = "???";
+        r.sequenceNumber = 0;
+        r.status = "ERR";
+
+        CheckpointClient cp = mock(CheckpointClient.class);
+
+        when(db.getClient("CP01", CheckpointClient.class)).thenReturn(Optional.of(cp));
+        when(cp.getId()).thenReturn("CP01");
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(l, times(1)).log(eq(Level.SEVERE), isA(String.class), isA(ReceiveMessage.class));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_STC_STAT_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "ST01";
+        r.clientType = "STC";
+        r.message = "STAT";
+        r.sequenceNumber = 0;
+
+        StationClient st = mock(StationClient.class);
+
+        when(db.getClient("ST01", StationClient.class)).thenReturn(Optional.of(st));
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(sh, times(1)).handleStatMessage(eq(st), isA(ReceiveMessage.class));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_STC_AKEX_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "ST01";
+        r.clientType = "STC";
+        r.message = "AKEX";
+        r.sequenceNumber = 0;
+
+        StationClient st = mock(StationClient.class);
+
+        when(db.getClient("ST01", StationClient.class)).thenReturn(Optional.of(st));
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_STC_STIN_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "ST01";
+        r.clientType = "STC";
+        r.message = "STIN";
+        r.sequenceNumber = 0;
+
+        StationClient st = mock(StationClient.class);
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(cf).handleInitialise(isA(ReceiveMessage.class), eq(InetAddress.getLocalHost()),
+                eq(0));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_STC_TRIP_ON_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "ST01";
+        r.clientType = "STC";
+        r.message = "TRIP";
+        r.sequenceNumber = 0;
+        r.status = "ON";
+
+        StationClient st = mock(StationClient.class);
+
+        when(db.getClient("ST01", StationClient.class)).thenReturn(Optional.of(st));
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(st).sendAcknowledgeMessage(eq(MessageEnums.AKType.AKTR));
+        verify(st).updateStatus(eq(MessageEnums.STCStatus.ON));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_STC_TRIP_OFF_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "ST01";
+        r.clientType = "STC";
+        r.message = "TRIP";
+        r.sequenceNumber = 0;
+        r.status = "OFF";
+
+        StationClient st = mock(StationClient.class);
+
+        when(db.getClient("ST01", StationClient.class)).thenReturn(Optional.of(st));
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(st).sendAcknowledgeMessage(eq(MessageEnums.AKType.AKTR));
+        verify(st).updateStatus(eq(MessageEnums.STCStatus.OFF));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_STC_TRIP_ERR_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "ST01";
+        r.clientType = "STC";
+        r.message = "TRIP";
+        r.sequenceNumber = 0;
+        r.status = "ERR";
+
+        StationClient st = mock(StationClient.class);
+
+        when(db.getClient("ST01", StationClient.class)).thenReturn(Optional.of(st));
+        when(st.getId()).thenReturn("ST01");
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(st).sendAcknowledgeMessage(eq(MessageEnums.AKType.AKTR));
+        verify(sm).addUnresponsiveClient(eq("ST01"), eq(ReasonEnum.CLIENTERR));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_STC_known_ERR_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "ST01";
+        r.clientType = "STC";
+        r.message = "???";
+        r.sequenceNumber = 0;
+
+        StationClient st = mock(StationClient.class);
+
+        when(db.getClient("ST01", StationClient.class)).thenReturn(Optional.of(st));
+        when(st.getId()).thenReturn("ST01");
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+        verify(l).log(eq(Level.WARNING), isA(String.class), eq(r.message));
+        verifyNoMoreInteractions(sh);
+    }
+
+    @Test
+    void test_STC_unknown_ERR_MSG() throws Exception {
+        ReceiveMessage r = new ReceiveMessage();
+        r.clientID = "ST01";
+        r.clientType = "STC";
+        r.message = "???";
+        r.sequenceNumber = 0;
+
+        String s = objectMapper.writeValueAsString(r);
+        mh.handleMessage(s, InetAddress.getLocalHost(), 0);
+
+
+        verify(l).log(eq(Level.SEVERE), isA(String.class), eq("ST01"));
+        verifyNoMoreInteractions(sh);
+    }
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"1d9b5952-4092-4fc7-8340-7dd220ada861\" name=\"Changes\" comment=\"Added tests\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/test/java/ServerTest.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/App.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/App.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/Processor.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/Processor.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/client/AbstractClient.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/client/AbstractClient.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/client/BladeRunnerClient.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/client/BladeRunnerClient.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/client/CheckpointClient.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/client/CheckpointClient.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/client/StationClient.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/client/StationClient.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/messages/ClientFactory.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/messages/ClientFactory.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/messages/MessageHandler.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/messages/MessageHandler.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/messages/StatHandler.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/messages/StatHandler.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/state/SystemStateManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/state/SystemStateManager.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Vchandrapati&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Vchandrapati/ENG3000MCP&quot;,\r\n    &quot;accountId&quot;: &quot;4e31187b-23c8-41a7-9e96-7c9dccea6ccc&quot;\r\n  }\r\n}</component>\r\n  <component name=\"KubernetesApiProvider\">{\r\n  &quot;isMigrated&quot;: true\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"ProjectErrors\" />\r\n  </component>\r\n  <component name=\"ProjectCodeStyleSettingsMigration\">\r\n    <option name=\"version\" value=\"2\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2mFBoeq8SVwYaBy3dnmQEg4k3Ej\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.Unnamed.executor\": \"Run\",\r\n    \"JUnit.ServerTest.testSystemStateManagerOnHighThroughput.executor\": \"Debug\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"SONARLINT_PRECOMMIT_ANALYSIS\": \"true\",\r\n    \"git-widget-placeholder\": \"experimental\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.0\",\r\n    \"project.structure.side.proportion\": \"0.0\",\r\n    \"run.code.analysis.last.selected.profile\": \"pProject Default\",\r\n    \"settings.editor.selected.configurable\": \"preferences.sourceCode\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Programming\\Java\\ENG3000MCP\\src\\main\\java\\org\\example\\messages\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"JUnit.ServerTest.testSystemStateManagerOnHighThroughput\">\r\n    <configuration name=\"Unnamed\" type=\"Application\" factoryName=\"Application\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.example.App\" />\r\n      <module name=\"ENG3000MCP2.0\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ServerTest.testPacketProcessing\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ENG3000MCP2.0\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"ServerTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"testPacketProcessing\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ServerTest.testPacketProcessingWithException\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ENG3000MCP2.0\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"ServerTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"testPacketProcessingWithException\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ServerTest.testSendMessageToClient\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ENG3000MCP2.0\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"ServerTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"testSendMessageToClient\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ServerTest.testSendMessageToClientWithException\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ENG3000MCP2.0\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"ServerTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"testSendMessageToClientWithException\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ServerTest.testSystemStateManagerOnHighThroughput\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ENG3000MCP2.0\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"ServerTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"testSystemStateManagerOnHighThroughput\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JUnit.ServerTest.testSystemStateManagerOnHighThroughput\" />\r\n        <item itemvalue=\"JUnit.ServerTest.testSendMessageToClientWithException\" />\r\n        <item itemvalue=\"JUnit.ServerTest.testSendMessageToClient\" />\r\n        <item itemvalue=\"JUnit.ServerTest.testPacketProcessingWithException\" />\r\n        <item itemvalue=\"JUnit.ServerTest.testPacketProcessing\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9f38398b9061-39b83d9b5494-intellij.indexing.shared.core-IU-241.18034.62\" />\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-IU-241.18034.62\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"1d9b5952-4092-4fc7-8340-7dd220ada861\" name=\"Changes\" comment=\"\" />\r\n      <created>1726662619710</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1726662619710</updated>\r\n      <workItem from=\"1726662620775\" duration=\"12389000\" />\r\n      <workItem from=\"1726714384225\" duration=\"3166000\" />\r\n      <workItem from=\"1726752285766\" duration=\"7356000\" />\r\n      <workItem from=\"1727093956805\" duration=\"221000\" />\r\n      <workItem from=\"1727094523589\" duration=\"4485000\" />\r\n      <workItem from=\"1727151100753\" duration=\"5434000\" />\r\n      <workItem from=\"1727174658497\" duration=\"15000\" />\r\n      <workItem from=\"1727190317781\" duration=\"938000\" />\r\n      <workItem from=\"1727334859992\" duration=\"4665000\" />\r\n      <workItem from=\"1727353281317\" duration=\"2659000\" />\r\n      <workItem from=\"1727423267711\" duration=\"1774000\" />\r\n      <workItem from=\"1727610779503\" duration=\"107000\" />\r\n      <workItem from=\"1727756919956\" duration=\"5487000\" />\r\n      <workItem from=\"1727784351705\" duration=\"3450000\" />\r\n      <workItem from=\"1728203512376\" duration=\"15480000\" />\r\n      <workItem from=\"1728346527791\" duration=\"4334000\" />\r\n      <workItem from=\"1728358965380\" duration=\"13378000\" />\r\n      <workItem from=\"1728454873014\" duration=\"4358000\" />\r\n      <workItem from=\"1728459319167\" duration=\"2407000\" />\r\n      <workItem from=\"1728518327776\" duration=\"10121000\" />\r\n      <workItem from=\"1728528588832\" duration=\"2275000\" />\r\n      <workItem from=\"1728631997087\" duration=\"1413000\" />\r\n      <workItem from=\"1728702329898\" duration=\"652000\" />\r\n      <workItem from=\"1728906571524\" duration=\"3099000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726665832685</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726665832685</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726668962356</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726668962356</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726670335389</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726670335389</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726670342536</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726670342536</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Made some changes to comply with sonarlint\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726670346212</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726670346212</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Made some changes to comply with sonarlint and rerouted messages in emergency state\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726671239958</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726671239958</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Made some changes to comply with sonarlint and rerouted messages in emergency state\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726714422632</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726714422632</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Updated some server logic and fixed message handler location\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726755404711</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726755404711</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Updated some server logic and fixed message handler location\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726755423120</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726755423120</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Updated visualiser to use different table for showing trains\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726757017143</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726757017143</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Updated visualiser to use different table for showing trains\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726757060265</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726757060265</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Updated visualiser to be more cohesive and added timer and did some sonarlint fixes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727153970881</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727153970881</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Renamed everything to blade runner and cleaned up code\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727340096208</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727340096208</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Refactored Database\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727353741185</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727353741185</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Fixed optional bug\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727423504889</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727423504889</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Fixed optional bug\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727424352865</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727424352865</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Refactored some processor code\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727770188427</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727770188427</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Added cool new panel\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727792285045</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727792285045</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Updated message handler to verify execs\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728359031782</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728359031782</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Fixed fuck up\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728360882451</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728360882451</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Changed stat message to change client status\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728367233839</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728367233839</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"refactored processor and fixed up some bugs\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728391832555</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728391832555</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728528001550</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728528001550</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728528043100</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728528043100</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728528792220</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728528792220</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728528804324</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728528804324</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"Moved subsystems into packages and seperated client\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728529120402</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728529120402</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Added tests\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728702691671</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728702691671</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"29\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Made some changes to comply with sonarlint\" />\r\n    <MESSAGE value=\"Made some changes to comply with sonarlint and rerouted messages in emergency state\" />\r\n    <MESSAGE value=\"Updated some server logic and fixed message handler location\" />\r\n    <MESSAGE value=\"Updated visualiser to use different table for showing trains\" />\r\n    <MESSAGE value=\"Updated visualiser to be more cohesive and added timer and did some sonarlint fixes\" />\r\n    <MESSAGE value=\"Reformatted code to be cleaner\" />\r\n    <MESSAGE value=\"Renamed everything to blade runner and cleaned up code\" />\r\n    <MESSAGE value=\"Refactored Database\" />\r\n    <MESSAGE value=\"Fixed optional bug\" />\r\n    <MESSAGE value=\"Refactored some processor code\" />\r\n    <MESSAGE value=\"Added cool new panel\" />\r\n    <MESSAGE value=\"Updated message handler to verify execs\" />\r\n    <MESSAGE value=\"Fixed fuck up\" />\r\n    <MESSAGE value=\"Changed stat message to change client status\" />\r\n    <MESSAGE value=\"refactored processor and fixed up some bugs\" />\r\n    <MESSAGE value=\"Moved subsystems into packages and seperated client\" />\r\n    <MESSAGE value=\"Added tests\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Added tests\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision f30f25ab2e1f329a80104be039f43eaab13a981e)
+++ b/.idea/workspace.xml	(date 1729005750961)
@@ -5,18 +5,11 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="1d9b5952-4092-4fc7-8340-7dd220ada861" name="Changes" comment="Added tests">
-      <change afterPath="$PROJECT_DIR$/src/test/java/ServerTest.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/test/java/MessageHandlerTest.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/App.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/App.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Processor.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Processor.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/client/AbstractClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/client/AbstractClient.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/client/BladeRunnerClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/client/BladeRunnerClient.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/client/CheckpointClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/client/CheckpointClient.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/client/StationClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/client/StationClient.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/messages/ClientFactory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/messages/ClientFactory.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/messages/MessageHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/messages/MessageHandler.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/messages/StatHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/messages/StatHandler.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/state/SystemStateManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/state/SystemStateManager.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/StatHandlerTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/StatHandlerTest.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -68,35 +61,49 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Application.Unnamed.executor": "Run",
-    "JUnit.ServerTest.testSystemStateManagerOnHighThroughput.executor": "Debug",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "SONARLINT_PRECOMMIT_ANALYSIS": "true",
-    "git-widget-placeholder": "experimental",
-    "kotlin-language-version-configured": "true",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "project.structure.last.edited": "Modules",
-    "project.structure.proportion": "0.0",
-    "project.structure.side.proportion": "0.0",
-    "run.code.analysis.last.selected.profile": "pProject Default",
-    "settings.editor.selected.configurable": "preferences.sourceCode",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Application.Unnamed.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.ServerTest.testSystemStateManagerOnHighThroughput.executor&quot;: &quot;Debug&quot;,
+    &quot;JUnit.StatHandlerTest.executor&quot;: &quot;Coverage&quot;,
+    &quot;JUnit.StatHandlerTest.test_ERR.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.StatHandlerTest.test_Start_Status_1_MSG_Scheduler.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.StatHandlerTest.test_Start_Status_1_MultiClient_MSG_Scheduler.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.StatHandlerTest.test_Start_Status_3_MSG_Scheduler.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.StatHandlerTest.test_Start_Status_3_MultiClient_MSG_Scheduler.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.StatHandlerTest.test_checkIfClientIsUnresponsive_false.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.StatHandlerTest.test_checkIfClientIsUnresponsive_true.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.StatHandlerTest.test_shutdown.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;SONARLINT_PRECOMMIT_ANALYSIS&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;experimental&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;D:/Programming/Java/ENG3000MCP/src/test/java&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
+    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.sourceCode&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="D:\Programming\Java\ENG3000MCP\src\test\java" />
+    </key>
     <key name="MoveFile.RECENT_KEYS">
+      <recent name="D:\Programming\Java\ENG3000MCP\src\test\java" />
       <recent name="D:\Programming\Java\ENG3000MCP\src\main\java\org\example\messages" />
     </key>
   </component>
-  <component name="RunManager" selected="JUnit.ServerTest.testSystemStateManagerOnHighThroughput">
+  <component name="RunManager" selected="JUnit.MessageHandlerTest">
     <configuration name="Unnamed" type="Application" factoryName="Application" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="org.example.App" />
       <module name="ENG3000MCP2.0" />
@@ -104,51 +111,49 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="ServerTest.testPacketProcessing" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="MessageHandlerTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ENG3000MCP2.0" />
       <option name="PACKAGE_NAME" value="" />
-      <option name="MAIN_CLASS_NAME" value="ServerTest" />
-      <option name="METHOD_NAME" value="testPacketProcessing" />
-      <option name="TEST_OBJECT" value="method" />
+      <option name="MAIN_CLASS_NAME" value="MessageHandlerTest" />
+      <option name="TEST_OBJECT" value="class" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="ServerTest.testPacketProcessingWithException" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="MessageHandlerTest.test_CCP_STAT_MSG" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ENG3000MCP2.0" />
       <option name="PACKAGE_NAME" value="" />
-      <option name="MAIN_CLASS_NAME" value="ServerTest" />
-      <option name="METHOD_NAME" value="testPacketProcessingWithException" />
+      <option name="MAIN_CLASS_NAME" value="MessageHandlerTest" />
+      <option name="METHOD_NAME" value="test_CCP_STAT_MSG" />
       <option name="TEST_OBJECT" value="method" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="ServerTest.testSendMessageToClient" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="StatHandlerTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ENG3000MCP2.0" />
       <option name="PACKAGE_NAME" value="" />
-      <option name="MAIN_CLASS_NAME" value="ServerTest" />
-      <option name="METHOD_NAME" value="testSendMessageToClient" />
-      <option name="TEST_OBJECT" value="method" />
+      <option name="MAIN_CLASS_NAME" value="StatHandlerTest" />
+      <option name="TEST_OBJECT" value="class" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="ServerTest.testSendMessageToClientWithException" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="StatHandlerTest.test_Start_Status_1_MultiClient_MSG_Scheduler" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ENG3000MCP2.0" />
       <option name="PACKAGE_NAME" value="" />
-      <option name="MAIN_CLASS_NAME" value="ServerTest" />
-      <option name="METHOD_NAME" value="testSendMessageToClientWithException" />
+      <option name="MAIN_CLASS_NAME" value="StatHandlerTest" />
+      <option name="METHOD_NAME" value="test_Start_Status_1_MultiClient_MSG_Scheduler" />
       <option name="TEST_OBJECT" value="method" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="ServerTest.testSystemStateManagerOnHighThroughput" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="StatHandlerTest.test_Start_Status_3_MultiClient_MSG_Scheduler" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ENG3000MCP2.0" />
       <option name="PACKAGE_NAME" value="" />
-      <option name="MAIN_CLASS_NAME" value="ServerTest" />
-      <option name="METHOD_NAME" value="testSystemStateManagerOnHighThroughput" />
+      <option name="MAIN_CLASS_NAME" value="StatHandlerTest" />
+      <option name="METHOD_NAME" value="test_Start_Status_3_MultiClient_MSG_Scheduler" />
       <option name="TEST_OBJECT" value="method" />
       <method v="2">
         <option name="Make" enabled="true" />
@@ -156,11 +161,11 @@
     </configuration>
     <recent_temporary>
       <list>
-        <item itemvalue="JUnit.ServerTest.testSystemStateManagerOnHighThroughput" />
-        <item itemvalue="JUnit.ServerTest.testSendMessageToClientWithException" />
-        <item itemvalue="JUnit.ServerTest.testSendMessageToClient" />
-        <item itemvalue="JUnit.ServerTest.testPacketProcessingWithException" />
-        <item itemvalue="JUnit.ServerTest.testPacketProcessing" />
+        <item itemvalue="JUnit.MessageHandlerTest" />
+        <item itemvalue="JUnit.MessageHandlerTest.test_CCP_STAT_MSG" />
+        <item itemvalue="JUnit.StatHandlerTest" />
+        <item itemvalue="JUnit.StatHandlerTest.test_Start_Status_3_MultiClient_MSG_Scheduler" />
+        <item itemvalue="JUnit.StatHandlerTest.test_Start_Status_1_MultiClient_MSG_Scheduler" />
       </list>
     </recent_temporary>
   </component>
@@ -203,7 +208,9 @@
       <workItem from="1728528588832" duration="2275000" />
       <workItem from="1728631997087" duration="1413000" />
       <workItem from="1728702329898" duration="652000" />
-      <workItem from="1728906571524" duration="3099000" />
+      <workItem from="1728906571524" duration="5134000" />
+      <workItem from="1728984405168" duration="8320000" />
+      <workItem from="1729003123160" duration="2412000" />
     </task>
     <task id="LOCAL-00001" summary="Made some changes to comply with sonarlint">
       <option name="closed" value="true" />
@@ -429,7 +436,15 @@
       <option name="project" value="LOCAL" />
       <updated>1728702691671</updated>
     </task>
-    <option name="localTasksCounter" value="29" />
+    <task id="LOCAL-00029" summary="Added tests">
+      <option name="closed" value="true" />
+      <created>1728912684623</created>
+      <option name="number" value="00029" />
+      <option name="presentableId" value="LOCAL-00029" />
+      <option name="project" value="LOCAL" />
+      <updated>1728912684623</updated>
+    </task>
+    <option name="localTasksCounter" value="30" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -466,4 +481,7 @@
     <MESSAGE value="Added tests" />
     <option name="LAST_COMMIT_MESSAGE" value="Added tests" />
   </component>
+  <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/ENG3000MCP$StatHandlerTest.ic" NAME="StatHandlerTest Coverage Results" MODIFIED="1729003221320" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="true" />
+  </component>
 </project>
\ No newline at end of file
Index: src/test/java/StatHandlerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.example.Database;\r\nimport org.example.Processor;\r\nimport org.example.client.AbstractClient;\r\nimport org.example.client.ReasonEnum;\r\nimport org.example.messages.StatHandler;\r\nimport org.example.state.SystemState;\r\nimport org.example.state.SystemStateManager;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.ArgumentCaptor;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.logging.Logger;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nclass StatHandlerTest {\r\n\r\n    @Mock\r\n    private Database mockDatabase;\r\n\r\n    @Mock\r\n    private SystemStateManager mockSystemStateManager;\r\n\r\n    @Mock\r\n    private AbstractClient mockClient;\r\n\r\n    @Mock\r\n    private Logger mockLogger;\r\n\r\n    @InjectMocks\r\n    private StatHandler statHandler;\r\n\r\n    @BeforeEach\r\n    void setUp () {\r\n        // Initialize mocks\r\n        MockitoAnnotations.openMocks(this);\r\n\r\n        // Ensure that singletons (if needed) return mocked instances\r\n        when(Database.getInstance()).thenReturn(mockDatabase);\r\n        when(SystemStateManager.getInstance()).thenReturn(mockSystemStateManager);\r\n    }\r\n\r\n    @Test\r\n    void testStartStatusScheduler() {\r\n\r\n    }\r\n\r\n    @Test\r\n    void testCheckIfClientIsUnresponsive() {\r\n\r\n    }\r\n\r\n    @Test\r\n    void testHandleStatMessage_withCorrectStatus() {\r\n\r\n    }\r\n\r\n    @Test\r\n    void testHandleStatMessage_withErrorStatus() {\r\n\r\n    }\r\n\r\n    @Test\r\n    void testShutdownScheduler() {\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/StatHandlerTest.java b/src/test/java/StatHandlerTest.java
--- a/src/test/java/StatHandlerTest.java	(revision f30f25ab2e1f329a80104be039f43eaab13a981e)
+++ b/src/test/java/StatHandlerTest.java	(date 1729005737749)
@@ -1,74 +1,186 @@
-import org.example.Database;
-import org.example.Processor;
+import org.example.*;
 import org.example.client.AbstractClient;
+import org.example.client.BladeRunnerClient;
 import org.example.client.ReasonEnum;
+import org.example.messages.MessageEnums;
+import org.example.messages.ReceiveMessage;
 import org.example.messages.StatHandler;
-import org.example.state.SystemState;
 import org.example.state.SystemStateManager;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
+import org.junit.runner.RunWith;
+import org.mockito.*;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.PowerMockRunner;
+import org.powermock.reflect.Whitebox;
 
-import java.util.Arrays;
-import java.util.Collections;
+import javax.xml.crypto.Data;
+import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
 import java.util.logging.Logger;
-
-import static org.junit.jupiter.api.Assertions.*;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.*;
 
+import java.lang.reflect.*;
+
+@RunWith(PowerMockRunner.class)
+@PrepareForTest(Processor.class)
 class StatHandlerTest {
 
     @Mock
-    private Database mockDatabase;
+    Database db;
+
+    @Mock
+    SystemStateManager sm;
 
     @Mock
-    private SystemStateManager mockSystemStateManager;
+    Logger l;
 
     @Mock
-    private AbstractClient mockClient;
+    Processor p;
 
     @Mock
-    private Logger mockLogger;
+    ScheduledExecutorService ses;
 
     @InjectMocks
-    private StatHandler statHandler;
+    StatHandler sh;
 
     @BeforeEach
-    void setUp () {
-        // Initialize mocks
+    void beforeEach() {
         MockitoAnnotations.openMocks(this);
+    }
+
+    @Test
+    void test_Start_Status_1_MSG_Scheduler() {
+        BladeRunnerClient br = mock(BladeRunnerClient.class);
+        List<AbstractClient> clients = new ArrayList<>();
+        clients.add(br);
+
+        when(db.getClients()).thenReturn(clients);
+
+        sh.startStatusScheduler();
+        verify(br, times(1)).sendStatusMessage();
+    }
+
+    @Test
+    void test_Start_Status_3_MSG_Scheduler() throws InterruptedException {
+        BladeRunnerClient br = mock(BladeRunnerClient.class);
 
-        // Ensure that singletons (if needed) return mocked instances
-        when(Database.getInstance()).thenReturn(mockDatabase);
-        when(SystemStateManager.getInstance()).thenReturn(mockSystemStateManager);
+        List<AbstractClient> clients = new ArrayList<AbstractClient>();
+        clients.add(br);
+        when(db.getClients()).thenReturn(clients);
+
+        sh.startStatusScheduler();
+
+        Thread.sleep(5000);
+        verify(br, times(3)).sendStatusMessage();
     }
 
     @Test
-    void testStartStatusScheduler() {
+    void test_Start_Status_1_MultiClient_MSG_Scheduler() throws InterruptedException {
+        BladeRunnerClient br = mock(BladeRunnerClient.class);
+        BladeRunnerClient br2 = mock(BladeRunnerClient.class);
+
+        List<AbstractClient> clients = new ArrayList<AbstractClient>();
+        clients.add(br);
+        clients.add(br2);
+        when(db.getClients()).thenReturn(clients);
 
+        sh.startStatusScheduler();
+
+        Thread.sleep(1000);
+        verify(br, times(1)).sendStatusMessage();
+        verify(br2, times(1)).sendStatusMessage();
     }
 
     @Test
-    void testCheckIfClientIsUnresponsive() {
+    void test_Start_Status_3_MultiClient_MSG_Scheduler() throws InterruptedException {
+        BladeRunnerClient br = mock(BladeRunnerClient.class);
+        BladeRunnerClient br2 = mock(BladeRunnerClient.class);
+
+        List<AbstractClient> clients = new ArrayList<AbstractClient>();
+        clients.add(br);
+        clients.add(br2);
+        when(db.getClients()).thenReturn(clients);
 
+        sh.startStatusScheduler();
+
+        Thread.sleep(5000);
+        verify(br, times(3)).sendStatusMessage();
+        verify(br2, times(3)).sendStatusMessage();
     }
 
     @Test
-    void testHandleStatMessage_withCorrectStatus() {
+    void test_checkIfClientIsUnresponsive_true() {
+        BladeRunnerClient br = mock(BladeRunnerClient.class);
 
+        when(br.checkResponsive()).thenReturn(true);
+        when(br.getId()).thenReturn("BR01");
+
+        try {
+            Whitebox.invokeMethod(sh, "checkIfClientIsUnresponsive", br);
+            verify(sm, times(1)).addUnresponsiveClient(eq("BR01"), eq(ReasonEnum.NOSTAT));
+        } catch (Exception e) {
+            // TODO: handle exception
+        }
     }
 
     @Test
-    void testHandleStatMessage_withErrorStatus() {
+    void test_checkIfClientIsUnresponsive_false() {
+        BladeRunnerClient br = mock(BladeRunnerClient.class);
+
+        when(br.checkResponsive()).thenReturn(false);
+        when(br.getId()).thenReturn("BR01");
+
+        try {
+            Whitebox.invokeMethod(sh, "checkIfClientIsUnresponsive", br);
+            verifyNoMoreInteractions(sm);
+        } catch (Exception e) {
+            // TODO: handle exception
+        }
 
     }
 
     @Test
-    void testShutdownScheduler() {
+    void test_shutdown() {
+        sh.shutdown();
+        verify(ses, times(1)).shutdown();
+    }
+
+     @Test
+     void test_ERR() {
+         ReceiveMessage r = new ReceiveMessage();
+         r.clientType = "CCP";
+         r.clientID = "BR01";
+         r.message = "STAT";
+         r.sequenceNumber = 2;
+         r.status = "STOPC";
+
+         BladeRunnerClient br = mock(BladeRunnerClient.class);
+
+         when(br.getLastActionSent()).thenReturn(MessageEnums.CCPAction.STOPC);
+         when(br.getStatus()).thenReturn(MessageEnums.CCPStatus.STOPC);
+         when(br.isExpectingStat()).thenReturn(false);
+         when(br.getLatestStatusMessageCount()).thenReturn(3);
 
+
+         sh.handleStatMessage(br, r);
+
+         verify(br, times(1)).sendAcknowledgeMessage(eq(MessageEnums.AKType.AKST));
+         verify(sm, never()).addUnresponsiveClient(eq("BR01"), eq(ReasonEnum.WRONGSTATUS));
+         verify(br, never()).updateLatestStatusMessageCount(eq(2));
+         verify(br, never()).resetMissedStats();
+
+         PowerMockito.verifyStatic(Processor.class, never());
+         Processor.bladeRunnerStopped("BR01");
+     }
+
+    private void naptime(long start, long amount) {
+        while (System.currentTimeMillis() - start < amount) {
+        }
     }
-}
\ No newline at end of file
+}
